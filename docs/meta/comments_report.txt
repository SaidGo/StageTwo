./dto/errors.go:1:// E:/Projects/Go2part/dto/errors.go
./dto/errors.go:4:// Error — стандартный DTO для ответа об ошибке в HTTP-хендлерах.
./dto/legalentities.go:1:// E:/Projects/Go2part/dto/legalentities.go
./dto/legalentities.go:4:// LegalEntity — DTO для выдачи сущности
./dto/legalentities.go:14:// LegalEntityCreate — DTO для создания
./dto/legalentities.go:23:// LegalEntityUpdate — DTO для частичного обновления
./dto/legalentities.go:32:// Совместимость со старым именем
./internal/app/db.go:1:// E:/Projects/Go2part/internal/app/db.go
./internal/app/fixes.go:1:// E:/Projects/Go2part/internal/app/fixes.go
./internal/app/fixes.go:6:// applyBankAccountsFix — заглушка. Нужна для совместимости с wire_gen.go.
./internal/app/fixes.go:7:// Если есть реальная логика миграции — перенеси её сюда. Сейчас просто no-op.
./internal/app/tools.go:1:// E:/Projects/Go2part/internal/app/tools.go
./internal/app/tools.go:2://go:build tools
./internal/app/wire.go:1://go:build wireinject
./internal/app/wire.go:2:// +build wireinject
./internal/app/wire.go:15:// Собираем все зависимости и возвращаем уже сконфигурированный *gin.Engine.
./internal/app/wire_gen.go:1:// Code generated by Wire. DO NOT EDIT.
./internal/app/wire_gen.go:3://go:generate go run -mod=mod github.com/google/wire/cmd/wire
./internal/app/wire_gen.go:4://go:build !wireinject
./internal/app/wire_gen.go:5:// +build !wireinject
./internal/app/wire_gen.go:16:// Injectors from wire.go:
./internal/app/wire_gen.go:18:// Собираем все зависимости и возвращаем уже сконфигурированный *gin.Engine.
./internal/helpers/validator.go:1:// E:/Projects/Go2part/internal/helpers/validator.go
./internal/helpers/validator.go:50:// HTTPSValidation — строка должна начинаться с https://
./internal/helpers/validator.go:56:// TrimValidation — нет ведущих/замыкающих пробелов
./internal/helpers/validator.go:62:// ColorValidation — формат #RRGGBB
./internal/helpers/validator.go:77:// NameValidation — только буквы/цифры/пробелы/( ) - _
./internal/helpers/validator.go:87:// ValidateLegalEntityField — число, не начинающееся с 2+ нулей
./internal/helpers/validator.go:96:// OptionalEmailValidation — пусто или корректный email
./internal/helpers/validator.go:105:// ValidationStruct — валидация структуры с RU-переводами и кастомными правилами
./internal/helpers/validator.go:117:	// Кастомные правила
./internal/helpers/validator.go:137:	// Переводы кастомных правил
./internal/helpers/validator.go:190:	// Базовые RU-переводы
./internal/helpers/validator.go:195:	// Доп. перевод email
./internal/helpers/validator.go:209:	// Отображаем RU-названия полей через тег `ru:"..."`.
./internal/helpers/validator.go:218:	// Валидация
./internal/kafka/common.go:24:// newSyncProducer создает idempotent SyncProducer.
./internal/kafka/common.go:25:// При ошибке возвращает nil и логирует предупреждение (degraded mode).
./internal/kafka/common.go:29:	// Idempotent producer + гарантии доставки
./internal/kafka/common.go:37:	// Версия кластера (совместимо с CP 7.3, Kafka 3.4.x)
./internal/kafka/legal_entity_sender.go:25:// SendLegalEntityCreated публикует событие; в degraded-mode молча пропускает.
./internal/legalentities/repository.go:1:// E:/Projects/Go2part/internal/legalentities/repository.go
./internal/legalentities/repository.go:18:	// --- Bank Accounts ---
./internal/legalentities/repository.go:26:	// --- Legal Entities (in-memory для фолбэка/демо) ---
./internal/legalentities/repository.go:51:        // ensure legal_entities for SQLite fallback
./internal/legalentities/repository.go:67:// ensureSchema — создаёт схему только для SQLite-фолбэка.
./internal/legalentities/repository.go:68:// Для Postgres используются миграции (migrations/*.sql), здесь — NOOP.
./internal/legalentities/repository.go:73:	// 1) Нормальный путь — AutoMigrate по модели bankAccountRow
./internal/legalentities/repository.go:79:	// 2) Фолбэк: raw DDL (по одной команде на Exec; некоторые драйверы не принимают мульти-statement)
./internal/legalentities/repository.go:100:        // ensure table legal_entities for SQLite fallback
./internal/legalentities/repository.go:102:                // если AutoMigrate не сработал — создадим явным DDL
./internal/legalentities/repository.go:119:// ---------------------------
./internal/legalentities/repository.go:120:// BankAccount mapping helpers
./internal/legalentities/repository.go:121:// ---------------------------
./internal/legalentities/repository.go:170:// ---------------------------
./internal/legalentities/repository.go:171:// BankAccount repository impl
./internal/legalentities/repository.go:172:// ---------------------------
./internal/legalentities/repository.go:274:// -----------------------------------------
./internal/legalentities/repository.go:275:// LegalEntity repository impl (in-memory)
./internal/legalentities/repository.go:276:// -----------------------------------------
./internal/legalentities/repository.go:349:// --- autogenerated add: legal entity CRUD
./internal/web/router.go:1:// E:/Projects/Go2part/internal/web/router.go
./internal/web/router.go:112:	// Метрики по путям (/legal-entities и /bank_accounts)
./internal/web/router.go:115:	// Экспорт метрик Prometheus
./internal/web/routers-metrics.go:1:// E:/Projects/Go2part/internal/web/routers-metrics.go
./internal/web/routers-metrics.go:34:// MetricsByPath — middleware. Инкремент только для валидно сопоставленного маршрута (исключаем 404).
./internal/web/routers-metrics.go:41:			// нерегистрированный маршрут (404) — не считаем
./.devcontainer/docker-compose.yaml:1:# E:/Projects/Go2part/docker-compose.yaml
./.devcontainer/docker-compose.yaml:125:  # --- добавлено: Prometheus ---
./.devcontainer/docker-compose.yaml:138:  # --- добавлено: Grafana ---
./.devcontainer/prometheus.yml:1:# E:/Projects/Go2part/prometheus.yml
./.golangci.yml:1:# See: https://olegk.dev/go-linters-configuration-the-right-version
./.golangci.yml:4:  # Depends on your hardware, my laptop can survive 8 threads.
./.golangci.yml:7:  # I really care about the result, so I'm fine to wait for it.
./.golangci.yml:10:  # Fail if the error was met.
./.golangci.yml:13:  # This is very important, bugs in tests are not acceptable either.
./.golangci.yml:16:  # In most cases this can be empty but there is a popular pattern
./.golangci.yml:17:  # to keep integration tests under this tag. Such tests often require
./.golangci.yml:18:  # additional setups like Postgres, Redis etc and are run separately.
./.golangci.yml:19:  # (to be honest I don't find this useful but I have such tags)
./.golangci.yml:23:  # Up to you, good for a big enough repo with no-Go code.
./.golangci.yml:25:    # - src/external_libs
./.golangci.yml:27:  # When enabled linter will skip catalogs: vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
./.golangci.yml:28:  # Skipping `examples` sounds scary to me but skipping `testdata` sounds ok.
./.golangci.yml:31:  # Autogenerated files can be skipped (I'm looking at you gRPC).
./.golangci.yml:32:  # AFAIK autogen files are skipped but skipping the whole catalog should be somewhat faster.
./.golangci.yml:33:  #skip-files:
./.golangci.yml:34:  #  - "protobuf/.*.go"
./.golangci.yml:36:  # With the read-only mode linter will fail if go.mod file is outdated.
./.golangci.yml:39:  # Till today I didn't know this param exists, never ran 2 golangci-lint at once.
./.golangci.yml:42:  # Keep this empty to use the Go version from the go.mod file.
./.golangci.yml:46:  # Set to true runs only fast linters.
./.golangci.yml:47:  # Good option for 'lint on save', pre-commit hook or CI.
./.golangci.yml:51:    # Check for pass []any as any in variadic func(...any).
./.golangci.yml:52:    # Rare case but saved me from debugging a few times.
./.golangci.yml:55:    # I prefer plane ASCII identifiers.
./.golangci.yml:56:    # Symbol `∆` instead of `delta` looks cool but no thanks.
./.golangci.yml:59:    # Checks for dangerous unicode character sequences.
./.golangci.yml:60:    # Super rare but why not to be a bit paranoid?
./.golangci.yml:63:    # Checks whether HTTP response body is closed successfully.
./.golangci.yml:66:    # Check whether the function uses a non-inherited context.
./.golangci.yml:67:    # - contextcheck
./.golangci.yml:69:    # Check for two durations multiplied together.
./.golangci.yml:72:    # Forces to not skip error check.
./.golangci.yml:75:    # Checks `Err-` prefix for var and `-Error` suffix for error type.
./.golangci.yml:78:    # Suggests to use `%w` for error-wrapping.
./.golangci.yml:81:    # Checks for pointers to enclosing loop variables.
./.golangci.yml:83:    # As you already know I'm a co-author. It would be strange to not use
./.golangci.yml:84:    # one of my warmly loved projects.
./.golangci.yml:87:    # Forces to put `.` at the end of the comment. Code is poetry.
./.golangci.yml:90:    # Might not be that important but I prefer to keep all of them.
./.golangci.yml:91:    # `gofumpt` is amazing, kudos to Daniel Marti https://github.com/mvdan/gofumpt
./.golangci.yml:96:    # Allow or ban replace directives in go.mod
./.golangci.yml:97:    # or force explanation for retract directives.
./.golangci.yml:98:    #- gomoddirectives
./.golangci.yml:100:    # Powerful security-oriented linter. But requires some time to
./.golangci.yml:101:    # configure it properly, see https://github.com/securego/gosec#available-rules
./.golangci.yml:104:    # Linter that specializes in simplifying code.
./.golangci.yml:107:    # Official Go tool. Must have.
./.golangci.yml:110:    # Detects when assignments to existing variables are not used
./.golangci.yml:111:    # Last week I caught a bug with it.
./.golangci.yml:114:    # Fix all the misspells, amazing thing.
./.golangci.yml:117:    # Finds naked/bare returns and requires change them.
./.golangci.yml:120:    # Both require a bit more explicit returns.
./.golangci.yml:124:    # Finds sending HTTP request without context.Context.
./.golangci.yml:127:    # Forces comment why another check is disabled.
./.golangci.yml:128:    # Better not to have //nolint: at all ;)
./.golangci.yml:131:    # Finds slices that could potentially be pre-allocated.
./.golangci.yml:132:    # Small performance win + cleaner code.
./.golangci.yml:135:    # Finds shadowing of Go's predeclared identifiers.
./.golangci.yml:136:    # I hear a lot of complaints from junior developers.
./.golangci.yml:137:    # But after some time they find it very useful.
./.golangci.yml:140:    # Lint your Prometheus metrics name.
./.golangci.yml:143:    # Checks that package variables are not reassigned.
./.golangci.yml:144:    # Super rare case but can catch bad things (like `io.EOF = nil`)
./.golangci.yml:149:    # I have found that it's not the same as staticcheck binary :\
./.golangci.yml:154:    # Check struct tags.
./.golangci.yml:157:    # Test-related checks. All of them are good.
./.golangci.yml:162:    # Remove unnecessary type conversions, make code cleaner
./.golangci.yml:165:    # Might be noisy but better to know what is unused
./.golangci.yml:168:    # Must have. Finds unused declarations.
./.golangci.yml:171:    # Detect the possibility to use variables/constants from stdlib.
./.golangci.yml:175:    # Detects struct contained context.Context field. Not a problem.
./.golangci.yml:178:    # Checks function and package cyclomatic complexity.
./.golangci.yml:179:    # I can have a long but trivial switch-case.
./.golangci.yml:180:    #
./.golangci.yml:181:    # Cyclomatic complexity is a measurement, not a goal.
./.golangci.yml:182:    # (c) Bryan C. Mills / https://github.com/bcmills
./.golangci.yml:185:    # Abandoned, replaced by `unused`.
./.golangci.yml:187:    # Check declaration order of types, consts, vars and funcs.
./.golangci.yml:188:    # I like it but I don't use it.
./.golangci.yml:191:    # Checks if package imports are in a list of acceptable packages.
./.golangci.yml:192:    # I'm very picky about what I import, so no automation.
./.golangci.yml:195:    # Checks assignments with too many blank identifiers. Very rare.
./.golangci.yml:198:    # Tool for code clone detection.
./.golangci.yml:201:    # Find duplicate words, rare.
./.golangci.yml:204:    # I'm fine to check the error from json.Marshal ¯\_(ツ)_/¯
./.golangci.yml:207:    # All SQL queries MUST BE covered with tests.
./.golangci.yml:209:    # Forces to handle more cases. Cool but noisy.
./.golangci.yml:213:    # Forbids some identifiers. I don't have a case for it.
./.golangci.yml:216:    # Finds forced type assertions, very good for juniors.
./.golangci.yml:219:    # I might have long but a simple function.
./.golangci.yml:222:    # Imports order. I do this manually ¯\_(ツ)_/¯
./.golangci.yml:225:    # Globals and init() are ok.
./.golangci.yml:229:    # Same as `cyclop` linter (see above)
./.golangci.yml:234:    # TODO and friends are ok.
./.golangci.yml:237:    # Check the error handling expressions. Too noisy.
./.golangci.yml:239:    # I don't use file headers.
./.golangci.yml:242:    # 1st Go linter, deprecated :( use `revive`.
./.golangci.yml:244:    # Reports magic consts. Might be noisy but still good.
./.golangci.yml:246:    # Allowed/blocked packages to import. I prefer to do it manually.
./.golangci.yml:249:    # Printf-like functions must have -f.
./.golangci.yml:252:    # Groupt declarations, I prefer manually.
./.golangci.yml:255:    # Deprecated.
./.golangci.yml:257:    # Checks imports aliases, rare.
./.golangci.yml:260:    # Forces tiny interfaces, very subjective.
./.golangci.yml:263:    # Accept interfaces, return types. Not always.
./.golangci.yml:266:    # I don't set line length. 120 is fine by the way ;)
./.golangci.yml:269:    # Some log checkers, might be useful.
./.golangci.yml:272:    # Maintainability index of each function, subjective.
./.golangci.yml:275:    # Slice declarations with non-zero initial length. Not my case.
./.golangci.yml:278:    # Deprecated. Use govet `fieldalignment`.
./.golangci.yml:280:    # Deeply nested if statements, subjective.
./.golangci.yml:283:    # Forces newlines in some places.
./.golangci.yml:286:    # Reports all named returns, not that bad.
./.golangci.yml:289:    # Deprecated. Replaced by `revive`.
./.golangci.yml:291:    # Finds misuse of Sprintf with host:port in a URL. Cool but rare.
./.golangci.yml:294:    # I don't use t.Parallel() that much.
./.golangci.yml:297:    # Often non-`_test` package is ok.
./.golangci.yml:300:    # Compiler can do it too :)
./.golangci.yml:303:    # I'm fine with long variable names with a small scope.
./.golangci.yml:306:    # gofmt,gofumpt covers that (from what I know).
./.golangci.yml:309:    # Don't find it useful to wrap all errors from external packages.
./.golangci.yml:312:    # Forces you to use empty lines. Great if configured correctly.
./.golangci.yml:313:    # I mean there is an agreement in a team.
./.golangci.yml:317:  # I'm biased and I'm enabling more than 100 checks
./.golangci.yml:318:  # Might be too much for you. See https://go-critic.com/overview.html
./.golangci.yml:327:      # These 3 will detect many cases, but they do sense
./.golangci.yml:328:      # if it's performance oriented code
./.golangci.yml:335:    # Report `a := b.(MyStruct)` when `a, ok := ...` should be.
./.golangci.yml:338:    # Report skipped checks:`num, _ := strconv.Atoi(numStr)`.
./.golangci.yml:341:    # Function to skip.
./.golangci.yml:352:    # No naked returns, ever.
./.golangci.yml:365:# See also https://gist.github.com/cristaloleg/dc29ca0ef2fb554de28d94c3c6f6dc88
./.golangci.yml:368:  # I prefer the simplest one: `line-number` and saving to `lint.txt`
./.golangci.yml:369:  #
./.golangci.yml:370:  # The `tab` also looks good and with the next release I will switch to it
./.golangci.yml:371:  # (ref: https://github.com/golangci/golangci-lint/issues/3728)
./.golangci.yml:372:  #
./.golangci.yml:373:  # There are more formats which can be used on CI or by your IDE.
./.golangci.yml:376:  # I do not find this useful, parameter above already enables filepath
./.golangci.yml:377:  # with a line and column. For me, it's easier to follow the path and
./.golangci.yml:378:  # see the line in an IDE where I see more code and understand it better.
./.golangci.yml:381:  # Must have. Easier to understand the output.
./.golangci.yml:384:  # No, no skips, everything should be reported.
./.golangci.yml:387:  # To be honest no idea when this can be needed, maybe a multi-module setup?
./.golangci.yml:390:  # Slightly easier to follow the results + getting deterministic output.
./.golangci.yml:394:  # I found it strange to skip the errors, setting 0 to have all the results.
./.golangci.yml:397:  # Same here, nothing should be skipped to not miss errors.
./.golangci.yml:400:  # When set to `true` linter will analyze only new code which are
./.golangci.yml:401:  # not committed or after some specific revision. This is a cool
./.golangci.yml:402:  # feature when you're going to introduce linter into a big project.
./.golangci.yml:403:  # But I prefer going gradually package by package.
./.golangci.yml:404:  # So, it's set to `false` to scan all code.
./.golangci.yml:407:  # 2 other params regarding git integration
./.golangci.yml:409:  # Even with a recent GPT-4 release I still believe that
./.golangci.yml:410:  # I know better how to do my job and fix the suggestions.
./docker-compose.yaml:1:# E:/Projects/Go2part/docker-compose.yaml
./docker-compose.yaml:125:  # --- Monitoring ---
./openapi/openapi.yaml:243:# Bank Accounts v2
./openapi/openapi.yaml:244:###
./openapi/openapi.yaml:245:#! include _fragments/bank_accounts_v2.yaml
./scripts/bash-env-docker.sh:1:#!/usr/bin/env bash
./scripts/docker-restart.sh:1:#!/usr/bin/env bash
./scripts/docker-start.ps1:1:# # E:/Projects/Go2part/scripts/docker-start.ps1
./scripts/docker-wait.sh:1:#!/usr/bin/env bash
./scripts/install-docker.ps1:1:# E:/Projects/Go2part/scripts/install-docker.ps1
./scripts/install-docker.ps1:2:# Требования: PowerShell от имени Администратора
./scripts/install-docker.ps1:4:# 1) Проверка прав
./scripts/install-docker.ps1:11:# 2) Включение компонентов WSL2
./scripts/install-docker.ps1:15:# 3) Выбор WSL2 по умолчанию
./scripts/install-docker.ps1:18:# 4) Установка Docker Desktop (через winget)
./scripts/install-docker.ps1:19:# Если winget отсутствует — обнови App Installer из Microsoft Store.
./scripts/kafka-topics-init.sh:1:#!/usr/bin/env bash
./scripts/port-kill-8080.sh:1:#!/usr/bin/env bash
./scripts/prometheus-curl.sh:1:#!/usr/bin/env bash
./scripts/start-monitoring.ps1:1:# # E:/Projects/Go2part/scripts/start-monitoring.ps1
./scripts/start-monitoring.sh:1:#!/usr/bin/env bash
./scripts/verify-monitoring.sh:1:#!/usr/bin/env bash
./scripts/verify.sh:1:#!/usr/bin/env bash
./scripts/web-kill-8080.sh:1:#!/usr/bin/env bash
./scripts/web-kill-8080.sh:6:# kill by pidfile if exists
./scripts/web-kill-8080.sh:15:# kill anything still holding 8080
./scripts/web-restart.sh:1:#!/usr/bin/env bash
./scripts/web-run.ps1:1:# # E:/Projects/Go2part/scripts/web-run.ps1
./scripts/web-run.sh:1:#!/usr/bin/env bash
./scripts/web-stop.sh:1:#!/usr/bin/env bash
./scripts/web-stop.sh:6:# 1) стоп по PID-файлу (если есть)
./scripts/web-stop.sh:15:# 2) добивка по имени
./scripts/web-stop.sh:18:# 3) очистка 8080
./scripts/win-firewall-8080.ps1:1:# E:/Projects/Go2part/scripts/win-firewall-8080.ps1
./scripts/win-task.sh:1:#!/usr/bin/env bash
./scripts/wsl-enable-compat.ps1:1:# E:/Projects/Go2part/scripts/wsl-enable-compat.ps1
./scripts/wsl-enable.ps1:1:# E:/Projects/Go2part/scripts/wsl-enable.ps1
./.devcontainer/Dockerfile:1:# See here for image contents: https://github.com/microsoft/vscode-dev-containers/tree/v0.245.2/containers/go/.devcontainer/base.Dockerfile
./.devcontainer/Dockerfile:12:# Update packages
./.devcontainer/Dockerfile:15:# [Package] Install golangci-lint 
./.devcontainer/Dockerfile:18:# [Package] Install act
./.devcontainer/Dockerfile:21:# [Pakage] Install openapi
./.devcontainer/Dockerfile:33:# [Package] Terraform
./.devcontainer/Dockerfile:35:# RUN sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
./.devcontainer/Dockerfile:36:# RUN wget -O- https://apt.releases.hashicorp.com/gpg | \
./.devcontainer/Dockerfile:37:#     gpg --dearmor | \
./.devcontainer/Dockerfile:38:#     sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
./.devcontainer/Dockerfile:40:# RUN gpg --no-default-keyring \
./.devcontainer/Dockerfile:41:#     --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
./.devcontainer/Dockerfile:42:#     --fingerprint
./.devcontainer/Dockerfile:44:# RUN echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
./.devcontainer/Dockerfile:45:#     https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
./.devcontainer/Dockerfile:46:#     sudo tee /etc/apt/sources.list.d/hashicorp.list
./.devcontainer/Dockerfile:48:# RUN sudo apt update
./.devcontainer/Dockerfile:49:# RUN sudo apt-get install terraform
./.devcontainer/Dockerfile:51:# [Package] jsonnet 
./.devcontainer/Dockerfile:56:# [Package] yq
./.devcontainer/Dockerfile:59:# [Package] yc 
./.devcontainer/Dockerfile:62:# [Package] node 
./.devcontainer/Dockerfile:68:# [Package] migrate 
./.devcontainer/Dockerfile:73:# [Package] wire
