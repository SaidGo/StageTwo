// Package olegalentity provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package olegalentity

import (
	"fmt"
	"net/http"
	"time"

	"example.com/local/Go2part/domain"
	"example.com/local/Go2part/dto"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for PostProfileDislikeJSONBodyType.
const (
	PostProfileDislikeJSONBodyTypeCompany    PostProfileDislikeJSONBodyType = "company"
	PostProfileDislikeJSONBodyTypeFederation PostProfileDislikeJSONBodyType = "federation"
	PostProfileDislikeJSONBodyTypeProject    PostProfileDislikeJSONBodyType = "project"
	PostProfileDislikeJSONBodyTypeTask       PostProfileDislikeJSONBodyType = "task"
)

// Defines values for PostProfileLikeJSONBodyType.
const (
	PostProfileLikeJSONBodyTypeCompany    PostProfileLikeJSONBodyType = "company"
	PostProfileLikeJSONBodyTypeFederation PostProfileLikeJSONBodyType = "federation"
	PostProfileLikeJSONBodyTypeProject    PostProfileLikeJSONBodyType = "project"
	PostProfileLikeJSONBodyTypeTask       PostProfileLikeJSONBodyType = "task"
)

// About defines model for About.
type About struct {
	BuildTime string `json:"build_time"`
	StartedAt string `json:"started_at"`
	Tag       string `json:"tag"`
	Uuid      string `json:"uuid"`
	Version   string `json:"version"`
}

// ActivityDTO defines model for ActivityDTO.
type ActivityDTO = dto.ActivityDTO

// AddGroupRequest defines model for AddGroupRequest.
type AddGroupRequest struct {
	Name string `json:"name" validate:"trim,name,min=3,max=100"`
}

// AgentCreateRequest defines model for AgentCreateRequest.
type AgentCreateRequest struct {
	CompanyUuid *openapi_types.UUID `json:"company_uuid,omitempty" validate:"omitempty,uuid"`
	Contacts    []struct {
		Type  string `json:"type" validate:"trim,min=3,max=100"`
		Value string `json:"value" validate:"trim,min=3,max=100"`
	} `json:"contacts"`
	Name string `json:"name" validate:"trim,name,min=3,max=100"`
}

// AgentDTO defines model for AgentDTO.
type AgentDTO = dto.AgentDTO

// AgentPatchRequest defines model for AgentPatchRequest.
type AgentPatchRequest struct {
	Contacts []struct {
		Type  string `json:"type" validate:"trim,min=3,max=100"`
		Value string `json:"value" validate:"trim,min=3,max=100"`
	} `json:"contacts"`
	Name string `json:"name" validate:"trim,name,min=3,max=100"`
}

// CatalogCreateRequest defines model for CatalogCreateRequest.
type CatalogCreateRequest struct {
	CompanyUuid openapi_types.UUID `json:"company_uuid" validate:"uuid"`
	Name        string             `json:"name" validate:"trim,name,min=1,max=200"`
}

// CatalogDTO defines model for CatalogDTO.
type CatalogDTO = dto.CatalogDTO

// CatalogFieldCreateRequest defines model for CatalogFieldCreateRequest.
type CatalogFieldCreateRequest struct {
	DataType domain.FieldDataType `json:"data_type" validate:"min=0,max=8"`
	DataUuid *openapi_types.UUID  `json:"data_uuid,omitempty" validate:"omitempty,uuid"`
	Name     string               `json:"name" validate:"trim,name,min=1,max=50"`
}

// CatalogFieldDTO defines model for CatalogFieldDTO.
type CatalogFieldDTO = dto.CatalogFieldDTO

// CatalogFieldPutRequest defines model for CatalogFieldPutRequest.
type CatalogFieldPutRequest struct {
	Name string `json:"name" validate:"trim,name,min=1,max=50"`
}

// CatalogNamedFieldCreateRequest defines model for CatalogNamedFieldCreateRequest.
type CatalogNamedFieldCreateRequest struct {
	DataType domain.FieldDataType `json:"data_type" validate:"min=0,max=8"`
	DataUuid *openapi_types.UUID  `json:"data_uuid,omitempty" validate:"omitempty,uuid"`
	Hash     string               `json:"hash" validate:"trim,name,min=3,max=20"`
	Name     string               `json:"name" validate:"trim,name,min=1,max=50"`
}

// CatalogSearchRequest defines model for CatalogSearchRequest.
type CatalogSearchRequest struct {
	CompanyUuid openapi_types.UUID `json:"company_uuid" validate:"uuid"`
}

// CommentDTO defines model for CommentDTO.
type CommentDTO = dto.CommentDTO

// CompanyAddUserRequest defines model for CompanyAddUserRequest.
type CompanyAddUserRequest struct {
	UserUuid openapi_types.UUID `json:"user_uuid" validate:"uuid"`
}

// CompanyDTO defines model for CompanyDTO.
type CompanyDTO = dto.CompanyDTO

// CompanyDTOs defines model for CompanyDTOs.
type CompanyDTOs = dto.CompanyDTOs

// CompanyFieldDTO defines model for CompanyFieldDTO.
type CompanyFieldDTO = dto.CompanyFieldDTO

// CompanyPriorityCreateRequest defines model for CompanyPriorityCreateRequest.
type CompanyPriorityCreateRequest struct {
	Color  string `json:"color" validate:"color"`
	Name   string `json:"name" validate:"trim,name,min=3,max=100"`
	Number int    `json:"number" validate:"gte=10,lte=30"`
}

// CompanyPriorityDTO defines model for CompanyPriorityDTO.
type CompanyPriorityDTO = dto.CompanyPriorityDTO

// FederationAddUserRequest defines model for FederationAddUserRequest.
type FederationAddUserRequest struct {
	UserUuid openapi_types.UUID `json:"user_uuid" validate:"uuid"`
}

// FederationCreateCompanyRequest defines model for FederationCreateCompanyRequest.
type FederationCreateCompanyRequest struct {
	FederationUuid openapi_types.UUID `json:"federation_uuid" validate:"uuid"`
	Name           string             `json:"name" validate:"trim,name,min=3,max=100"`
}

// FederationCreateRequest defines model for FederationCreateRequest.
type FederationCreateRequest struct {
	Name string `json:"name" validate:"trim,name,min=3,max=100"`
}

// FederationDTO defines model for FederationDTO.
type FederationDTO = dto.FederationDTO

// FederationDTOs defines model for FederationDTOs.
type FederationDTOs = dto.FederationDTOs

// GroupDTO defines model for GroupDTO.
type GroupDTO = dto.GroupDTO

// Health defines model for Health.
type Health struct {
	Postgres string `json:"postgres"`
	Redis    string `json:"redis"`
	Status   string `json:"status"`
}

// InviteCreateRequest defines model for InviteCreateRequest.
type InviteCreateRequest struct {
	CompanyUuid *openapi_types.UUID `json:"company_uuid,omitempty" validate:"omitempty,uuid"`
	Email       string              `json:"email" validate:"email"`
}

// InviteDTO defines model for InviteDTO.
type InviteDTO = dto.InviteDTO

// LegalEntityDTO defines model for LegalEntityDTO.
type LegalEntityDTO struct {
	Name string              `json:"name"`
	Uuid *openapi_types.UUID `json:"uuid,omitempty"`
}

// NameRequest defines model for NameRequest.
type NameRequest struct {
	Name string `json:"name" validate:"trim,name,min=0,max=100"`
}

// NameRequiredRequest defines model for NameRequiredRequest.
type NameRequiredRequest struct {
	Name string `json:"name" validate:"trim,name,min=1,max=100"`
}

// NotificationReminderDTO defines model for NotificationReminderDTO.
type NotificationReminderDTO = dto.NotificationReminderDTO

// NotificationTaskDTO defines model for NotificationTaskDTO.
type NotificationTaskDTO = dto.NotificationTaskDTO

// PatchGroupRequest defines model for PatchGroupRequest.
type PatchGroupRequest struct {
	Name *string `json:"name,omitempty" validate:"trim,name,min=1,max=100"`
}

// PermissionCreateRequest defines model for PermissionCreateRequest.
type PermissionCreateRequest struct {
	FederationUuid openapi_types.UUID `json:"federation_uuid" validate:"uuid"`
	Rules          PermissionRulesDTO `json:"rules"`
	UserUuid       openapi_types.UUID `json:"user_uuid" validate:"uuid"`
	Uuid           openapi_types.UUID `json:"uuid" validate:"uuid"`
}

// PermissionRulesDTO defines model for PermissionRulesDTO.
type PermissionRulesDTO = dto.PermissionRulesDTO

// ProfileChangePasswordRequest defines model for ProfileChangePasswordRequest.
type ProfileChangePasswordRequest struct {
	NewPassword string `json:"new_password" validate:"trim,min=6,max=30"`
	Password    string `json:"password" validate:"trim,min=6,max=30"`
}

// ProfileDTO defines model for ProfileDTO.
type ProfileDTO = dto.ProfileDTO

// ProfileLoginAsRequest defines model for ProfileLoginAsRequest.
type ProfileLoginAsRequest struct {
	Email string `json:"email" validate:"trim,min=5,max=200"`
}

// ProfileLoginRequest defines model for ProfileLoginRequest.
type ProfileLoginRequest struct {
	Email      string `json:"email" validate:"trim,min=5,max=200"`
	Password   string `json:"password" validate:"trim,min=6,max=30"`
	RememberMe bool   `json:"remember_me"`
}

// ProfileLoginResponse defines model for ProfileLoginResponse.
type ProfileLoginResponse struct {
	AccessToken  string             `json:"access_token"`
	RefreshToken string             `json:"refresh_token"`
	Uuid         openapi_types.UUID `json:"uuid"`
	ValidUntil   time.Time          `json:"valid_until"`
}

// ProfilePhotoDTO defines model for ProfilePhotoDTO.
type ProfilePhotoDTO = dto.ProfilePhotoDTO

// ProfileRegisterRequest defines model for ProfileRegisterRequest.
type ProfileRegisterRequest struct {
	Email    string `json:"email" validate:"trim,min=5,max=200"`
	Lname    string `json:"lname" validate:"trim,name,min=0,max=30"`
	Name     string `json:"name" validate:"trim,name,min=1,max=30"`
	Password string `json:"password" validate:"trim,min=6,max=30"`
	Phone    int    `json:"phone" validate:"min=10000000000,max=9999999999999"`
	Pname    string `json:"pname" validate:"trim,name,min=0,max=30"`
}

// ProfileResetRequest defines model for ProfileResetRequest.
type ProfileResetRequest struct {
	Code     string `json:"code" validate:"trim,min=20,max=100"`
	Password string `json:"password" validate:"trim,min=6,max=30"`
}

// ProfileResetSendRequest defines model for ProfileResetSendRequest.
type ProfileResetSendRequest struct {
	Email string `json:"email" validate:"trim,email"`
}

// ProfileSentValidateRequest defines model for ProfileSentValidateRequest.
type ProfileSentValidateRequest struct {
	Email string `json:"email" validate:"email"`
}

// ProfileValidateRequest defines model for ProfileValidateRequest.
type ProfileValidateRequest struct {
	Code string `json:"code" validate:"trim,min=20,max=20"`
}

// ProfileValidateSimpleRequest defines model for ProfileValidateSimpleRequest.
type ProfileValidateSimpleRequest struct {
	Code  int    `json:"code" validate:"gte=100000,max=999999"`
	Email string `json:"email" validate:"email"`
}

// ProjectAddUserRequest defines model for ProjectAddUserRequest.
type ProjectAddUserRequest struct {
	UserUuid openapi_types.UUID `json:"user_uuid" validate:"uuid"`
}

// ProjectCatalogDataDTO defines model for ProjectCatalogDataDTO.
type ProjectCatalogDataDTO = dto.ProjectCatalogDataDTO

// ProjectCreateRequest defines model for ProjectCreateRequest.
type ProjectCreateRequest struct {
	CompanyUuid   openapi_types.UUID `json:"company_uuid" validate:"uuid"`
	Description   string             `json:"description" validate:"trim,max=5000"`
	FieldsSort    []string           `json:"fields_sort" validate:"omitempty,dive,min=0,max=30"`
	Name          string             `json:"name" validate:"trim,min=3,max=100"`
	ResponsibleBy string             `json:"responsible_by" validate:"omitempty,email"`
	StatusSort    []int              `json:"status_sort" validate:"dive,gte=0,lte=30"`
}

// ProjectDTO defines model for ProjectDTO.
type ProjectDTO = dto.ProjectDTO

// ProjectDTOs defines model for ProjectDTOs.
type ProjectDTOs = dto.ProjectDTOs

// ProjectFieldCreateRequest defines model for ProjectFieldCreateRequest.
type ProjectFieldCreateRequest struct {
	DataType           domain.FieldDataType `json:"data_type" validate:"min=0,max=14"`
	DataUuid           *openapi_types.UUID  `json:"data_uuid,omitempty" validate:"omitempty,uuid"`
	Description        string               `json:"description" validate:"trim,max=5000"`
	Icon               string               `json:"icon" validate:"trim,omitempty,lte=50"`
	Name               string               `json:"name" validate:"trim,name,min=1,max=50"`
	RequiredOnStatuses []int                `json:"required_on_statuses" validate:"omitempty,dive,gte=0,lte=20"`
}

// ProjectFieldPutRequest defines model for ProjectFieldPutRequest.
type ProjectFieldPutRequest struct {
	Description        string `json:"description" validate:"trim,max=5000"`
	Icon               string `json:"icon" validate:"trim,max=50"`
	Name               string `json:"name" validate:"trim,name,min=1,max=50"`
	RequiredOnStatuses []int  `json:"required_on_statuses" validate:"omitempty,dive,gte=0,lte=20"`
}

// ProjectRequestOptions defines model for ProjectRequestOptions.
type ProjectRequestOptions struct {
	Color                     *string `json:"color,omitempty" validate:"omitempty,color"`
	RequireCancelationComment *bool   `json:"require_cancelation_comment,omitempty"`
	RequireDoneComment        *bool   `json:"require_done_comment,omitempty"`
	StatusEnable              *bool   `json:"status_enable,omitempty"`
}

// ProjectRequestParams defines model for ProjectRequestParams.
type ProjectRequestParams struct {
	Description   *string   `json:"description,omitempty" validate:"omitempty,trim,max=5000"`
	FieldsSort    *[]string `json:"fields_sort,omitempty" validate:"omitempty,dive,min=0,max=30"`
	ResponsibleBy *string   `json:"responsible_by,omitempty" validate:"omitempty,email"`
	Status        *int      `json:"status,omitempty" validate:"omitempty,min=0,max=10"`
	StatusSort    *[]int    `json:"status_sort,omitempty" validate:"omitempty,dive,gte=0,lte=30"`
}

// ProjectStatusCreateRequest defines model for ProjectStatusCreateRequest.
type ProjectStatusCreateRequest struct {
	Color       string `json:"color" validate:"color"`
	Description string `json:"description" validate:"trim,max=5000"`
	Name        string `json:"name" validate:"trim,name,min=3,max=100"`
	Number      int    `json:"number" validate:"gte=0,lte=30"`
}

// ProjectStatusDTO defines model for ProjectStatusDTO.
type ProjectStatusDTO = dto.ProjectStatusDTO

// ReminderCreateRequest defines model for ReminderCreateRequest.
type ReminderCreateRequest struct {
	DateFrom    *time.Time          `json:"date_from,omitempty"`
	DateTo      *time.Time          `json:"date_to,omitempty"`
	Description string              `json:"description" validate:"trim,name,min=0,max=2000"`
	TaskUuid    openapi_types.UUID  `json:"task_uuid" validate:"uuid"`
	Type        string              `json:"type" validate:"trim,name,min=0,max=50"`
	UserUuid    *openapi_types.UUID `json:"user_uuid,omitempty"`
}

// ReminderDTO defines model for ReminderDTO.
type ReminderDTO = dto.ReminderDTO

// ReminderPutRequest defines model for ReminderPutRequest.
type ReminderPutRequest struct {
	Comment     string              `json:"comment" validate:"trim,min=0,max=5000"`
	DateFrom    *time.Time          `json:"date_from,omitempty"`
	DateTo      *time.Time          `json:"date_to,omitempty"`
	Description string              `json:"description" validate:"trim,name,min=0,max=2000"`
	Type        string              `json:"type" validate:"trim,name,min=0,max=50"`
	UserUuid    *openapi_types.UUID `json:"user_uuid,omitempty"`
}

// SearchUserRequest defines model for SearchUserRequest.
type SearchUserRequest struct {
	CompanyUuid    *openapi_types.UUID `json:"company_uuid" validate:"omitempty,uuid"`
	FederationUuid openapi_types.UUID  `json:"federation_uuid" validate:"uuid"`
	Search         string              `json:"search" validate:"trim,min=1,max=200"`
}

// SmsDTO defines model for SmsDTO.
type SmsDTO = dto.SmsDTO

// StatusRequest defines model for StatusRequest.
type StatusRequest struct {
	Comment string `json:"comment" validate:"trim,min=0,max=300"`
	Status  int    `json:"status" validate:"gte=0,lte=20"`
}

// SurveyCreateRequest defines model for SurveyCreateRequest.
type SurveyCreateRequest struct {
	Body map[string]interface{} `json:"body"`
	Name string                 `json:"name" validate:"trim,name,min=3,max=100"`
}

// SurveyDTO defines model for SurveyDTO.
type SurveyDTO = dto.SurveyDTO

// TagCreateRequest defines model for TagCreateRequest.
type TagCreateRequest struct {
	Color       string             `json:"color" validate:"color"`
	CompanyUuid openapi_types.UUID `json:"company_uuid" validate:"uuid"`
	Name        string             `json:"name" validate:"trim,name,min=1,max=100"`
}

// TagDTO defines model for TagDTO.
type TagDTO = dto.TagDTO

// TaskCreateRequest defines model for TaskCreateRequest.
type TaskCreateRequest struct {
	CoworkersBy   []string               `json:"coworkers_by" validate:"dive,email"`
	Description   string                 `json:"description" validate:"trim,max=5000"`
	Fields        map[string]interface{} `json:"fields"`
	FinishTo      *time.Time             `json:"finish_to,omitempty"`
	Icon          string                 `json:"icon" validate:"trim,max=50"`
	ImplementBy   string                 `json:"implement_by" validate:"omitempty,email"`
	ManagedBy     string                 `json:"managed_by" validate:"omitempty,email"`
	Name          string                 `json:"name" validate:"trim,name,min=3,max=200"`
	Path          []string               `json:"path" validate:"dive,uuid"`
	Priority      int                    `json:"priority" validate:"gte=0,lte=30"`
	ProjectUuid   openapi_types.UUID     `json:"project_uuid" validate:"uuid"`
	ResponsibleBy string                 `json:"responsible_by" validate:"omitempty,email"`
	Tags          []string               `json:"tags" validate:"dive,trim,name,max=40"`
	TaskEntities  []domain.TaskEntity    `json:"task_entities"`
}

// TaskDTO defines model for TaskDTO.
type TaskDTO = dto.TaskDTO

// TaskDTOs defines model for TaskDTOs.
type TaskDTOs = dto.TaskDTOs

// TaskPutRequest defines model for TaskPutRequest.
type TaskPutRequest struct {
	Description *string                 `json:"description,omitempty" validate:"trim,max=5000"`
	Fields      *map[string]interface{} `json:"fields,omitempty"`
	FinishTo    *time.Time              `json:"finish_to,omitempty"`
	Icon        *string                 `json:"icon,omitempty" validate:"omitempty,trim,lte=20"`
	ManagedBy   *string                 `json:"managed_by,omitempty" validate:"omitempty,email"`
	Priority    *int                    `json:"priority,omitempty" validate:"gte=0,lte=30"`
	Tags        *[]string               `json:"tags,omitempty" validate:"dive,trim,name,max=40"`
}

// UUIDResponse defines model for UUIDResponse.
type UUIDResponse struct {
	Uuid openapi_types.UUID `json:"uuid"`
}

// UploadDTO defines model for UploadDTO.
type UploadDTO = dto.UploadDTO

// UserDTO defines model for UserDTO.
type UserDTO = dto.UserDTO

// EntityName defines model for entityName.
type EntityName = string

// EntityUUID defines model for entityUUID.
type EntityUUID = openapi_types.UUID

// FileUUID defines model for fileUUID.
type FileUUID = openapi_types.UUID

// UserUUID defines model for userUUID.
type UserUUID = openapi_types.UUID

// Uuid defines model for uuid.
type Uuid = openapi_types.UUID

// GetCatalogUUIDDataParams defines parameters for GetCatalogUUIDData.
type GetCatalogUUIDDataParams struct {
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`
	Order  *string `form:"order,omitempty" json:"order,omitempty"`
	By     *string `form:"by,omitempty" json:"by,omitempty"`
}

// PostCatalogUUIDDataJSONBody defines parameters for PostCatalogUUIDData.
type PostCatalogUUIDDataJSONBody struct {
	Fields map[string]interface{} `json:"fields"`
}

// PatchCompanyUUIDPrioritiesEntityUUIDJSONBody defines parameters for PatchCompanyUUIDPrioritiesEntityUUID.
type PatchCompanyUUIDPrioritiesEntityUUIDJSONBody struct {
	Color string `json:"color" validate:"color"`
	Name  string `json:"name" validate:"trim,min=1,max=50"`
}

// GetCompanyUUIDSmsParams defines parameters for GetCompanyUUIDSms.
type GetCompanyUUIDSmsParams struct {
	Offset *int  `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *int  `form:"limit,omitempty" json:"limit,omitempty"`
	IsMy   *bool `form:"is_my,omitempty" json:"is_my,omitempty"`
}

// PostCompanyUUIDSmsCostJSONBody defines parameters for PostCompanyUUIDSmsCost.
type PostCompanyUUIDSmsCostJSONBody struct {
	Phone int    `json:"phone" validate:"trim,min=1000000000,max=9999999999999"`
	Text  string `json:"text" validate:"trim,min=1,max=100"`
}

// PostCompanyUUIDSmsOptionsJSONBody defines parameters for PostCompanyUUIDSmsOptions.
type PostCompanyUUIDSmsOptionsJSONBody struct {
	Api  string `json:"api"`
	From string `json:"from"`
}

// PostCompanyUUIDSmsSendJSONBody defines parameters for PostCompanyUUIDSmsSend.
type PostCompanyUUIDSmsSendJSONBody struct {
	Phone int    `json:"phone" validate:"trim,min=1000000000,max=9999999999999"`
	Text  string `json:"text" validate:"trim,min=1,max=100"`
}

// PostCompanyUUIDSmsSendParams defines parameters for PostCompanyUUIDSmsSend.
type PostCompanyUUIDSmsSendParams struct {
	MockSms *string `json:"Mock-Sms,omitempty"`
}

// GetFederationUUIDAgentParams defines parameters for GetFederationUUIDAgent.
type GetFederationUUIDAgentParams struct {
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetFederationUUIDProjectParams defines parameters for GetFederationUUIDProject.
type GetFederationUUIDProjectParams struct {
	Limit       *int                `form:"limit,omitempty" json:"limit,omitempty"`
	Offset      *int                `form:"offset,omitempty" json:"offset,omitempty"`
	CompanyUuid *openapi_types.UUID `form:"company_uuid,omitempty" json:"company_uuid,omitempty"`
}

// DeleteGroupUUIDUserJSONBody defines parameters for DeleteGroupUUIDUser.
type DeleteGroupUUIDUserJSONBody struct {
	Uuid openapi_types.UUID `json:"uuid" validate:"uuid"`
}

// PostGroupUUIDUserJSONBody defines parameters for PostGroupUUIDUser.
type PostGroupUUIDUserJSONBody struct {
	Uuid openapi_types.UUID `json:"uuid" validate:"uuid"`
}

// PatchProfileColorJSONBody defines parameters for PatchProfileColor.
type PatchProfileColorJSONBody struct {
	Color string `json:"color" validate:"color"`
}

// PostProfileDislikeJSONBody defines parameters for PostProfileDislike.
type PostProfileDislikeJSONBody struct {
	Type PostProfileDislikeJSONBodyType `json:"type"`
	Uuid openapi_types.UUID             `json:"uuid"`
}

// PostProfileDislikeJSONBodyType defines parameters for PostProfileDislike.
type PostProfileDislikeJSONBodyType string

// PatchProfileFioJSONBody defines parameters for PatchProfileFio.
type PatchProfileFioJSONBody struct {
	Lname *string `json:"lname,omitempty" validate:"trim,name,omitempty,max=50"`
	Name  *string `json:"name,omitempty" validate:"trim,name,omitempty,min=3,max=50"`
	Pname *string `json:"pname,omitempty" validate:"trim,name,omitempty,max=50"`
}

// PostProfileLikeJSONBody defines parameters for PostProfileLike.
type PostProfileLikeJSONBody struct {
	Type PostProfileLikeJSONBodyType `json:"type"`
	Uuid openapi_types.UUID          `json:"uuid"`
}

// PostProfileLikeJSONBodyType defines parameters for PostProfileLike.
type PostProfileLikeJSONBodyType string

// PatchProfilePhoneJSONBody defines parameters for PatchProfilePhone.
type PatchProfilePhoneJSONBody struct {
	Phone int `json:"phone" validate:"trim,min=10000000000,max=9999999999999"`
}

// PatchProfilePhotoMultipartBody defines parameters for PatchProfilePhoto.
type PatchProfilePhotoMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty"`
}

// PatchProfilePreferencesJSONBody defines parameters for PatchProfilePreferences.
type PatchProfilePreferencesJSONBody struct {
	Timezone *string `json:"timezone,omitempty"`
}

// PostProjectUUIDCatalogJSONBody defines parameters for PostProjectUUIDCatalog.
type PostProjectUUIDCatalogJSONBody struct {
	CatalogName domain.ProjectCatalogType `json:"catalog_name" validate:"trim,required,eq=reasons|eq=reasons"`
	Value       string                    `json:"value" validate:"trim,min=1,max=500"`
}

// PatchProjectUUIDDescriptionJSONBody defines parameters for PatchProjectUUIDDescription.
type PatchProjectUUIDDescriptionJSONBody struct {
	Description string `json:"description" validate:"max=5000"`
}

// PostProjectUUIDFieldEntityUUIDJSONBody defines parameters for PostProjectUUIDFieldEntityUUID.
type PostProjectUUIDFieldEntityUUIDJSONBody struct {
	RequiredOnStatuses []int  `json:"required_on_statuses"`
	Style              string `json:"style"`
}

// PatchProjectUUIDGraphJSONBody defines parameters for PatchProjectUUIDGraph.
type PatchProjectUUIDGraphJSONBody struct {
	Graph map[string]interface{} `json:"graph"`
}

// PatchProjectUUIDStatusEntityUUIDJSONBody defines parameters for PatchProjectUUIDStatusEntityUUID.
type PatchProjectUUIDStatusEntityUUIDJSONBody struct {
	Color       string `json:"color" validate:"color"`
	Description string `json:"description" validate:"trim,max=5000"`
	Name        string `json:"name" validate:"trim,min=1,max=50"`
}

// GetTagParams defines parameters for GetTag.
type GetTagParams struct {
	CompanyUuid openapi_types.UUID `form:"company_uuid" json:"company_uuid"`
}

// PatchTagUUIDJSONBody defines parameters for PatchTagUUID.
type PatchTagUUIDJSONBody struct {
	Color string `json:"color" validate:"color"`
	Name  string `json:"name" validate:"trim,min=1,max=100"`
}

// GetTaskParams defines parameters for GetTask.
type GetTaskParams struct {
	Offset         *int               `form:"offset,omitempty" json:"offset,omitempty"`
	Limit          *int               `form:"limit,omitempty" json:"limit,omitempty"`
	IsMy           *bool              `form:"is_my,omitempty" json:"is_my,omitempty"`
	Status         *int               `form:"status,omitempty" json:"status,omitempty"`
	IsEpic         *bool              `form:"is_epic,omitempty" json:"is_epic,omitempty"`
	ProjectUuid    openapi_types.UUID `form:"project_uuid" json:"project_uuid"`
	FederationUuid openapi_types.UUID `form:"federation_uuid" json:"federation_uuid"`
	Participated   *[]string          `form:"participated,omitempty" json:"participated,omitempty"`
	Tags           *[]string          `form:"tags,omitempty" json:"tags,omitempty"`
	Path           *string            `form:"path,omitempty" json:"path,omitempty"`
	Name           *string            `form:"name,omitempty" json:"name,omitempty"`
	Fields         *string            `form:"fields,omitempty" json:"fields,omitempty"`
	Order          *string            `form:"order,omitempty" json:"order,omitempty"`
	By             *string            `form:"by,omitempty" json:"by,omitempty"`
	Format         *string            `form:"format,omitempty" json:"format,omitempty"`
}

// GetTaskUUIDActivityParams defines parameters for GetTaskUUIDActivity.
type GetTaskUUIDActivityParams struct {
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostTaskUUIDCommentMultipartBody defines parameters for PostTaskUUIDComment.
type PostTaskUUIDCommentMultipartBody struct {
	Comment   *string             `json:"comment,omitempty"`
	File      *openapi_types.File `json:"file,omitempty"`
	People    *[]string           `json:"people,omitempty"`
	ReplyUuid *openapi_types.UUID `json:"reply_uuid,omitempty"`
}

// PatchTaskUUIDCommentEntityUUIDMultipartBody defines parameters for PatchTaskUUIDCommentEntityUUID.
type PatchTaskUUIDCommentEntityUUIDMultipartBody struct {
	Comment   *string             `json:"comment,omitempty"`
	File      *openapi_types.File `json:"file,omitempty"`
	People    *[]string           `json:"people,omitempty"`
	ReplyUuid *openapi_types.UUID `json:"reply_uuid,omitempty"`
}

// PatchTaskUUIDParentJSONBody defines parameters for PatchTaskUUIDParent.
type PatchTaskUUIDParentJSONBody struct {
	Uuid *openapi_types.UUID `json:"uuid,omitempty" validate:"omitempty,uuid"`
}

// PatchTaskUUIDProjectJSONBody defines parameters for PatchTaskUUIDProject.
type PatchTaskUUIDProjectJSONBody struct {
	Comment string             `json:"comment" validate:"trim,min=0,max=300"`
	Status  int                `json:"status" validate:"gte=0,lte=20"`
	Uuid    openapi_types.UUID `json:"uuid" validate:"uuid"`
}

// PatchTaskUUIDTeamJSONBody defines parameters for PatchTaskUUIDTeam.
type PatchTaskUUIDTeamJSONBody struct {
	CoworkersBy   *[]string `json:"coworkers_by,omitempty" validate:"omitempty,dive,email"`
	ImplementBy   *string   `json:"implement_by,omitempty" validate:"omitempty,optional_email"`
	ManagedBy     *string   `json:"managed_by,omitempty" validate:"omitempty,optional_email"`
	ResponsibleBy *string   `json:"responsible_by,omitempty" validate:"omitempty,optional_email"`
	WatchedBy     *[]string `json:"watched_by,omitempty" validate:"omitempty,dive,email"`
}

// PatchTaskUUIDUploadMultipartBody defines parameters for PatchTaskUUIDUpload.
type PatchTaskUUIDUploadMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty"`
}

// PostTaskUUIDUploadEntityUUIDRenameJSONBody defines parameters for PostTaskUUIDUploadEntityUUIDRename.
type PostTaskUUIDUploadEntityUUIDRenameJSONBody struct {
	Name string `json:"name" validate:"trim,min=1,max=50"`
}

// GetCatalogJSONRequestBody defines body for GetCatalog for application/json ContentType.
type GetCatalogJSONRequestBody = CatalogSearchRequest

// PostCatalogJSONRequestBody defines body for PostCatalog for application/json ContentType.
type PostCatalogJSONRequestBody = CatalogCreateRequest

// PostCatalogUUIDDataJSONRequestBody defines body for PostCatalogUUIDData for application/json ContentType.
type PostCatalogUUIDDataJSONRequestBody PostCatalogUUIDDataJSONBody

// PostCatalogUUIDFieldsJSONRequestBody defines body for PostCatalogUUIDFields for application/json ContentType.
type PostCatalogUUIDFieldsJSONRequestBody = CatalogFieldCreateRequest

// PostCatalogUUIDFieldsNamedJSONRequestBody defines body for PostCatalogUUIDFieldsNamed for application/json ContentType.
type PostCatalogUUIDFieldsNamedJSONRequestBody = CatalogNamedFieldCreateRequest

// PutCatalogUUIDFieldsEntityUUIDJSONRequestBody defines body for PutCatalogUUIDFieldsEntityUUID for application/json ContentType.
type PutCatalogUUIDFieldsEntityUUIDJSONRequestBody = CatalogFieldPutRequest

// PatchCatalogUUIDNameJSONRequestBody defines body for PatchCatalogUUIDName for application/json ContentType.
type PatchCatalogUUIDNameJSONRequestBody = NameRequest

// PostCompanyJSONRequestBody defines body for PostCompany for application/json ContentType.
type PostCompanyJSONRequestBody = FederationCreateCompanyRequest

// PostCompanyUUIDFieldsJSONRequestBody defines body for PostCompanyUUIDFields for application/json ContentType.
type PostCompanyUUIDFieldsJSONRequestBody = ProjectFieldCreateRequest

// PutCompanyUUIDFieldsEntityUUIDJSONRequestBody defines body for PutCompanyUUIDFieldsEntityUUID for application/json ContentType.
type PutCompanyUUIDFieldsEntityUUIDJSONRequestBody = ProjectFieldPutRequest

// PostCompanyUUIDGroupJSONRequestBody defines body for PostCompanyUUIDGroup for application/json ContentType.
type PostCompanyUUIDGroupJSONRequestBody = AddGroupRequest

// PatchCompanyUUIDGroupEntityUUIDJSONRequestBody defines body for PatchCompanyUUIDGroupEntityUUID for application/json ContentType.
type PatchCompanyUUIDGroupEntityUUIDJSONRequestBody = PatchGroupRequest

// PatchCompanyUUIDNameJSONRequestBody defines body for PatchCompanyUUIDName for application/json ContentType.
type PatchCompanyUUIDNameJSONRequestBody = NameRequiredRequest

// PostCompanyUUIDPrioritiesJSONRequestBody defines body for PostCompanyUUIDPriorities for application/json ContentType.
type PostCompanyUUIDPrioritiesJSONRequestBody = CompanyPriorityCreateRequest

// PatchCompanyUUIDPrioritiesEntityUUIDJSONRequestBody defines body for PatchCompanyUUIDPrioritiesEntityUUID for application/json ContentType.
type PatchCompanyUUIDPrioritiesEntityUUIDJSONRequestBody PatchCompanyUUIDPrioritiesEntityUUIDJSONBody

// PostCompanyUUIDSmsCostJSONRequestBody defines body for PostCompanyUUIDSmsCost for application/json ContentType.
type PostCompanyUUIDSmsCostJSONRequestBody PostCompanyUUIDSmsCostJSONBody

// PostCompanyUUIDSmsOptionsJSONRequestBody defines body for PostCompanyUUIDSmsOptions for application/json ContentType.
type PostCompanyUUIDSmsOptionsJSONRequestBody PostCompanyUUIDSmsOptionsJSONBody

// PostCompanyUUIDSmsSendJSONRequestBody defines body for PostCompanyUUIDSmsSend for application/json ContentType.
type PostCompanyUUIDSmsSendJSONRequestBody PostCompanyUUIDSmsSendJSONBody

// PostCompanyUUIDUserJSONRequestBody defines body for PostCompanyUUIDUser for application/json ContentType.
type PostCompanyUUIDUserJSONRequestBody = CompanyAddUserRequest

// PostFederationJSONRequestBody defines body for PostFederation for application/json ContentType.
type PostFederationJSONRequestBody = FederationCreateRequest

// PostFederationUUIDAgentJSONRequestBody defines body for PostFederationUUIDAgent for application/json ContentType.
type PostFederationUUIDAgentJSONRequestBody = AgentCreateRequest

// PatchFederationUUIDAgentEntityUUIDJSONRequestBody defines body for PatchFederationUUIDAgentEntityUUID for application/json ContentType.
type PatchFederationUUIDAgentEntityUUIDJSONRequestBody = AgentPatchRequest

// PostFederationUUIDInviteJSONRequestBody defines body for PostFederationUUIDInvite for application/json ContentType.
type PostFederationUUIDInviteJSONRequestBody = InviteCreateRequest

// PatchFederationUUIDNameJSONRequestBody defines body for PatchFederationUUIDName for application/json ContentType.
type PatchFederationUUIDNameJSONRequestBody = NameRequiredRequest

// PostFederationUUIDUserJSONRequestBody defines body for PostFederationUUIDUser for application/json ContentType.
type PostFederationUUIDUserJSONRequestBody = FederationAddUserRequest

// DeleteGroupUUIDUserJSONRequestBody defines body for DeleteGroupUUIDUser for application/json ContentType.
type DeleteGroupUUIDUserJSONRequestBody DeleteGroupUUIDUserJSONBody

// PostGroupUUIDUserJSONRequestBody defines body for PostGroupUUIDUser for application/json ContentType.
type PostGroupUUIDUserJSONRequestBody PostGroupUUIDUserJSONBody

// CreateLegalEntityJSONRequestBody defines body for CreateLegalEntity for application/json ContentType.
type CreateLegalEntityJSONRequestBody = LegalEntityDTO

// UpdateLegalEntityJSONRequestBody defines body for UpdateLegalEntity for application/json ContentType.
type UpdateLegalEntityJSONRequestBody = LegalEntityDTO

// PostPermissionsJSONRequestBody defines body for PostPermissions for application/json ContentType.
type PostPermissionsJSONRequestBody = PermissionCreateRequest

// PostProfileJSONRequestBody defines body for PostProfile for application/json ContentType.
type PostProfileJSONRequestBody = ProfileRegisterRequest

// PatchProfileColorJSONRequestBody defines body for PatchProfileColor for application/json ContentType.
type PatchProfileColorJSONRequestBody PatchProfileColorJSONBody

// PostProfileDislikeJSONRequestBody defines body for PostProfileDislike for application/json ContentType.
type PostProfileDislikeJSONRequestBody PostProfileDislikeJSONBody

// PatchProfileFioJSONRequestBody defines body for PatchProfileFio for application/json ContentType.
type PatchProfileFioJSONRequestBody PatchProfileFioJSONBody

// PostProfileLikeJSONRequestBody defines body for PostProfileLike for application/json ContentType.
type PostProfileLikeJSONRequestBody PostProfileLikeJSONBody

// PostProfileLoginJSONRequestBody defines body for PostProfileLogin for application/json ContentType.
type PostProfileLoginJSONRequestBody = ProfileLoginRequest

// PostProfileLoginAsJSONRequestBody defines body for PostProfileLoginAs for application/json ContentType.
type PostProfileLoginAsJSONRequestBody = ProfileLoginAsRequest

// PatchProfilePasswordJSONRequestBody defines body for PatchProfilePassword for application/json ContentType.
type PatchProfilePasswordJSONRequestBody = ProfileChangePasswordRequest

// PatchProfilePhoneJSONRequestBody defines body for PatchProfilePhone for application/json ContentType.
type PatchProfilePhoneJSONRequestBody PatchProfilePhoneJSONBody

// PatchProfilePhotoMultipartRequestBody defines body for PatchProfilePhoto for multipart/form-data ContentType.
type PatchProfilePhotoMultipartRequestBody PatchProfilePhotoMultipartBody

// PatchProfilePreferencesJSONRequestBody defines body for PatchProfilePreferences for application/json ContentType.
type PatchProfilePreferencesJSONRequestBody PatchProfilePreferencesJSONBody

// PostProfileResetJSONRequestBody defines body for PostProfileReset for application/json ContentType.
type PostProfileResetJSONRequestBody = ProfileResetRequest

// PostProfileResetSendJSONRequestBody defines body for PostProfileResetSend for application/json ContentType.
type PostProfileResetSendJSONRequestBody = ProfileResetSendRequest

// PostProfileSurveyJSONRequestBody defines body for PostProfileSurvey for application/json ContentType.
type PostProfileSurveyJSONRequestBody = SurveyCreateRequest

// PostProfileValidateJSONRequestBody defines body for PostProfileValidate for application/json ContentType.
type PostProfileValidateJSONRequestBody = ProfileValidateRequest

// PostProfileValidateSimpleJSONRequestBody defines body for PostProfileValidateSimple for application/json ContentType.
type PostProfileValidateSimpleJSONRequestBody = ProfileValidateSimpleRequest

// PostProfileValidateSimpleSendJSONRequestBody defines body for PostProfileValidateSimpleSend for application/json ContentType.
type PostProfileValidateSimpleSendJSONRequestBody = ProfileSentValidateRequest

// PostProfileValidateSendJSONRequestBody defines body for PostProfileValidateSend for application/json ContentType.
type PostProfileValidateSendJSONRequestBody = ProfileSentValidateRequest

// PostProjectJSONRequestBody defines body for PostProject for application/json ContentType.
type PostProjectJSONRequestBody = ProjectCreateRequest

// PatchProjectUUIDJSONRequestBody defines body for PatchProjectUUID for application/json ContentType.
type PatchProjectUUIDJSONRequestBody = ProjectRequestParams

// PostProjectUUIDCatalogJSONRequestBody defines body for PostProjectUUIDCatalog for application/json ContentType.
type PostProjectUUIDCatalogJSONRequestBody PostProjectUUIDCatalogJSONBody

// PatchProjectUUIDDescriptionJSONRequestBody defines body for PatchProjectUUIDDescription for application/json ContentType.
type PatchProjectUUIDDescriptionJSONRequestBody PatchProjectUUIDDescriptionJSONBody

// PostProjectUUIDFieldEntityUUIDJSONRequestBody defines body for PostProjectUUIDFieldEntityUUID for application/json ContentType.
type PostProjectUUIDFieldEntityUUIDJSONRequestBody PostProjectUUIDFieldEntityUUIDJSONBody

// PatchProjectUUIDGraphJSONRequestBody defines body for PatchProjectUUIDGraph for application/json ContentType.
type PatchProjectUUIDGraphJSONRequestBody PatchProjectUUIDGraphJSONBody

// PatchProjectUUIDNameJSONRequestBody defines body for PatchProjectUUIDName for application/json ContentType.
type PatchProjectUUIDNameJSONRequestBody = NameRequest

// PatchProjectUUIDOptionsJSONRequestBody defines body for PatchProjectUUIDOptions for application/json ContentType.
type PatchProjectUUIDOptionsJSONRequestBody = ProjectRequestOptions

// PostProjectUUIDStatusJSONRequestBody defines body for PostProjectUUIDStatus for application/json ContentType.
type PostProjectUUIDStatusJSONRequestBody = ProjectStatusCreateRequest

// PatchProjectUUIDStatusEntityUUIDJSONRequestBody defines body for PatchProjectUUIDStatusEntityUUID for application/json ContentType.
type PatchProjectUUIDStatusEntityUUIDJSONRequestBody PatchProjectUUIDStatusEntityUUIDJSONBody

// PostProjectUUIDUserJSONRequestBody defines body for PostProjectUUIDUser for application/json ContentType.
type PostProjectUUIDUserJSONRequestBody = ProjectAddUserRequest

// PostReminderJSONRequestBody defines body for PostReminder for application/json ContentType.
type PostReminderJSONRequestBody = ReminderCreateRequest

// PutReminderUUIDJSONRequestBody defines body for PutReminderUUID for application/json ContentType.
type PutReminderUUIDJSONRequestBody = ReminderPutRequest

// PatchReminderUUIDStatusJSONRequestBody defines body for PatchReminderUUIDStatus for application/json ContentType.
type PatchReminderUUIDStatusJSONRequestBody = StatusRequest

// PostTagJSONRequestBody defines body for PostTag for application/json ContentType.
type PostTagJSONRequestBody = TagCreateRequest

// PatchTagUUIDJSONRequestBody defines body for PatchTagUUID for application/json ContentType.
type PatchTagUUIDJSONRequestBody PatchTagUUIDJSONBody

// PostTaskJSONRequestBody defines body for PostTask for application/json ContentType.
type PostTaskJSONRequestBody = TaskCreateRequest

// PutTaskUUIDJSONRequestBody defines body for PutTaskUUID for application/json ContentType.
type PutTaskUUIDJSONRequestBody = TaskPutRequest

// PostTaskUUIDCommentMultipartRequestBody defines body for PostTaskUUIDComment for multipart/form-data ContentType.
type PostTaskUUIDCommentMultipartRequestBody PostTaskUUIDCommentMultipartBody

// PatchTaskUUIDCommentEntityUUIDMultipartRequestBody defines body for PatchTaskUUIDCommentEntityUUID for multipart/form-data ContentType.
type PatchTaskUUIDCommentEntityUUIDMultipartRequestBody PatchTaskUUIDCommentEntityUUIDMultipartBody

// PatchTaskUUIDNameJSONRequestBody defines body for PatchTaskUUIDName for application/json ContentType.
type PatchTaskUUIDNameJSONRequestBody = NameRequest

// PatchTaskUUIDParentJSONRequestBody defines body for PatchTaskUUIDParent for application/json ContentType.
type PatchTaskUUIDParentJSONRequestBody PatchTaskUUIDParentJSONBody

// PatchTaskUUIDProjectJSONRequestBody defines body for PatchTaskUUIDProject for application/json ContentType.
type PatchTaskUUIDProjectJSONRequestBody PatchTaskUUIDProjectJSONBody

// PatchTaskUUIDStatusJSONRequestBody defines body for PatchTaskUUIDStatus for application/json ContentType.
type PatchTaskUUIDStatusJSONRequestBody = StatusRequest

// PatchTaskUUIDTeamJSONRequestBody defines body for PatchTaskUUIDTeam for application/json ContentType.
type PatchTaskUUIDTeamJSONRequestBody PatchTaskUUIDTeamJSONBody

// PatchTaskUUIDUploadMultipartRequestBody defines body for PatchTaskUUIDUpload for multipart/form-data ContentType.
type PatchTaskUUIDUploadMultipartRequestBody PatchTaskUUIDUploadMultipartBody

// PostTaskUUIDUploadEntityUUIDRenameJSONRequestBody defines body for PostTaskUUIDUploadEntityUUIDRename for application/json ContentType.
type PostTaskUUIDUploadEntityUUIDRenameJSONRequestBody PostTaskUUIDUploadEntityUUIDRenameJSONBody

// GetUserJSONRequestBody defines body for GetUser for application/json ContentType.
type GetUserJSONRequestBody = SearchUserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /about)
	GetAbout(ctx echo.Context) error

	// (GET /catalog)
	GetCatalog(ctx echo.Context) error

	// (POST /catalog)
	PostCatalog(ctx echo.Context) error

	// (DELETE /catalog/{UUID})
	DeleteCatalogUUID(ctx echo.Context, uuid Uuid) error

	// (GET /catalog/{UUID})
	GetCatalogUUID(ctx echo.Context, uuid Uuid) error

	// (GET /catalog/{UUID}/data)
	GetCatalogUUIDData(ctx echo.Context, uuid openapi_types.UUID, params GetCatalogUUIDDataParams) error

	// (POST /catalog/{UUID}/data)
	PostCatalogUUIDData(ctx echo.Context, uuid Uuid) error

	// (GET /catalog/{UUID}/fields)
	GetCatalogUUIDFields(ctx echo.Context, uuid Uuid) error

	// (POST /catalog/{UUID}/fields)
	PostCatalogUUIDFields(ctx echo.Context, uuid Uuid) error

	// (POST /catalog/{UUID}/fields/named)
	PostCatalogUUIDFieldsNamed(ctx echo.Context, uuid Uuid) error

	// (DELETE /catalog/{UUID}/fields/{entityUUID})
	DeleteCatalogUUIDFieldsEntityUUID(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (PUT /catalog/{UUID}/fields/{entityUUID})
	PutCatalogUUIDFieldsEntityUUID(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (PATCH /catalog/{UUID}/name)
	PatchCatalogUUIDName(ctx echo.Context, uuid Uuid) error

	// (POST /company)
	PostCompany(ctx echo.Context) error

	// (DELETE /company/{UUID})
	DeleteCompanyUUID(ctx echo.Context, uuid Uuid) error

	// (GET /company/{UUID})
	GetCompanyUUID(ctx echo.Context, uuid Uuid) error

	// (GET /company/{UUID}/fields)
	GetCompanyUUIDFields(ctx echo.Context, uuid Uuid) error

	// (POST /company/{UUID}/fields)
	PostCompanyUUIDFields(ctx echo.Context, uuid Uuid) error

	// (DELETE /company/{UUID}/fields/{entityUUID})
	DeleteCompanyUUIDFieldsEntityUUID(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (PUT /company/{UUID}/fields/{entityUUID})
	PutCompanyUUIDFieldsEntityUUID(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (GET /company/{UUID}/group)
	GetCompanyUUIDGroup(ctx echo.Context, uuid Uuid) error

	// (POST /company/{UUID}/group)
	PostCompanyUUIDGroup(ctx echo.Context, uuid Uuid) error

	// (DELETE /company/{UUID}/group/{entityUUID})
	DeleteCompanyUUIDGroupEntityUUID(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (PATCH /company/{UUID}/group/{entityUUID})
	PatchCompanyUUIDGroupEntityUUID(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (PATCH /company/{UUID}/name)
	PatchCompanyUUIDName(ctx echo.Context, uuid Uuid) error

	// (GET /company/{UUID}/priorities)
	GetCompanyUUIDPriorities(ctx echo.Context, uuid Uuid) error

	// (POST /company/{UUID}/priorities)
	PostCompanyUUIDPriorities(ctx echo.Context, uuid Uuid) error

	// (DELETE /company/{UUID}/priorities/{entityUUID})
	DeleteCompanyUUIDPrioritiesEntityUUID(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (PATCH /company/{UUID}/priorities/{entityUUID})
	PatchCompanyUUIDPrioritiesEntityUUID(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (GET /company/{UUID}/project/catalog/{entityName})
	GetCompanyUUIDProjectCatalogEntityName(ctx echo.Context, uuid Uuid, entityName EntityName) error

	// (GET /company/{UUID}/sms)
	GetCompanyUUIDSms(ctx echo.Context, uuid Uuid, params GetCompanyUUIDSmsParams) error

	// (POST /company/{UUID}/sms/cost)
	PostCompanyUUIDSmsCost(ctx echo.Context, uuid Uuid) error

	// (POST /company/{UUID}/sms/options)
	PostCompanyUUIDSmsOptions(ctx echo.Context, uuid Uuid) error

	// (POST /company/{UUID}/sms/send)
	PostCompanyUUIDSmsSend(ctx echo.Context, uuid Uuid, params PostCompanyUUIDSmsSendParams) error

	// (POST /company/{UUID}/user)
	PostCompanyUUIDUser(ctx echo.Context, uuid Uuid) error

	// (DELETE /company/{UUID}/user/{userUUID})
	DeleteCompanyUUIDUserUserUUID(ctx echo.Context, uuid Uuid, userUUID UserUUID) error

	// (POST /federation)
	PostFederation(ctx echo.Context) error

	// (DELETE /federation/{UUID})
	DeleteFederationUUID(ctx echo.Context, uuid Uuid) error

	// (GET /federation/{UUID})
	GetFederationUUID(ctx echo.Context, uuid Uuid) error

	// (GET /federation/{UUID}/agent)
	GetFederationUUIDAgent(ctx echo.Context, uuid Uuid, params GetFederationUUIDAgentParams) error

	// (POST /federation/{UUID}/agent)
	PostFederationUUIDAgent(ctx echo.Context, uuid Uuid) error

	// (DELETE /federation/{UUID}/agent/{entityUUID})
	DeleteFederationUUIDAgentEntityUUID(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (PATCH /federation/{UUID}/agent/{entityUUID})
	PatchFederationUUIDAgentEntityUUID(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (GET /federation/{UUID}/invite)
	GetFederationUUIDInvite(ctx echo.Context, uuid Uuid) error

	// (POST /federation/{UUID}/invite)
	PostFederationUUIDInvite(ctx echo.Context, uuid Uuid) error

	// (DELETE /federation/{UUID}/invite/{entityUUID})
	DeleteFederationUUIDInviteEntityUUID(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (PATCH /federation/{UUID}/name)
	PatchFederationUUIDName(ctx echo.Context, uuid Uuid) error

	// (GET /federation/{UUID}/project)
	GetFederationUUIDProject(ctx echo.Context, uuid Uuid, params GetFederationUUIDProjectParams) error

	// (POST /federation/{UUID}/user)
	PostFederationUUIDUser(ctx echo.Context, uuid Uuid) error

	// (DELETE /federation/{UUID}/user/{userUUID})
	DeleteFederationUUIDUserUserUUID(ctx echo.Context, uuid Uuid, userUUID UserUUID) error

	// (DELETE /group/{UUID}/user)
	DeleteGroupUUIDUser(ctx echo.Context, uuid Uuid) error

	// (GET /group/{UUID}/user)
	GetGroupUUIDUser(ctx echo.Context, uuid Uuid) error

	// (POST /group/{UUID}/user)
	PostGroupUUIDUser(ctx echo.Context, uuid Uuid) error

	// (GET /health)
	GetHealth(ctx echo.Context) error
	// Get all legal entities
	// (GET /legal-entities)
	GetAllLegalEntities(ctx echo.Context) error
	// Create a legal entity
	// (POST /legal-entities)
	CreateLegalEntity(ctx echo.Context) error
	// Delete legal entity
	// (DELETE /legal-entities/{uuid})
	DeleteLegalEntity(ctx echo.Context, uuid openapi_types.UUID) error
	// Update legal entity
	// (PUT /legal-entities/{uuid})
	UpdateLegalEntity(ctx echo.Context, uuid openapi_types.UUID) error

	// (POST /permissions)
	PostPermissions(ctx echo.Context) error

	// (DELETE /permissions/{UUID})
	DeletePermissionsUUID(ctx echo.Context, uuid Uuid) error

	// (GET /permissions/{UUID})
	GetPermissionsUUID(ctx echo.Context, uuid Uuid) error

	// (DELETE /profile)
	DeleteProfile(ctx echo.Context) error

	// (GET /profile)
	GetProfile(ctx echo.Context) error

	// (POST /profile)
	PostProfile(ctx echo.Context) error

	// (PATCH /profile/color)
	PatchProfileColor(ctx echo.Context) error

	// (POST /profile/dislike)
	PostProfileDislike(ctx echo.Context) error

	// (PATCH /profile/fio)
	PatchProfileFio(ctx echo.Context) error

	// (GET /profile/invite)
	GetProfileInvite(ctx echo.Context) error

	// (PATCH /profile/invite/{UUID}/accept)
	PatchProfileInviteUUIDAccept(ctx echo.Context, uuid Uuid) error

	// (PATCH /profile/invite/{UUID}/decline)
	PatchProfileInviteUUIDDecline(ctx echo.Context, uuid Uuid) error

	// (POST /profile/like)
	PostProfileLike(ctx echo.Context) error

	// (GET /profile/likes)
	GetProfileLikes(ctx echo.Context) error

	// (POST /profile/login)
	PostProfileLogin(ctx echo.Context) error

	// (POST /profile/login_as)
	PostProfileLoginAs(ctx echo.Context) error

	// (GET /profile/logout)
	GetProfileLogout(ctx echo.Context) error

	// (DELETE /profile/notifications)
	DeleteProfileNotifications(ctx echo.Context) error

	// (GET /profile/notifications)
	GetProfileNotifications(ctx echo.Context) error

	// (POST /profile/notifications/task/{UUID}/hide)
	PostProfileNotificationsTaskUUIDHide(ctx echo.Context, uuid Uuid) error

	// (DELETE /profile/notifications/task/{UUID}/star)
	DeleteProfileNotificationsTaskUUIDStar(ctx echo.Context, uuid Uuid) error

	// (POST /profile/notifications/task/{UUID}/star)
	PostProfileNotificationsTaskUUIDStar(ctx echo.Context, uuid Uuid) error

	// (PATCH /profile/password)
	PatchProfilePassword(ctx echo.Context) error

	// (PATCH /profile/phone)
	PatchProfilePhone(ctx echo.Context) error

	// (DELETE /profile/photo)
	DeleteProfilePhoto(ctx echo.Context) error

	// (PATCH /profile/photo)
	PatchProfilePhoto(ctx echo.Context) error

	// (PATCH /profile/preferences)
	PatchProfilePreferences(ctx echo.Context) error

	// (POST /profile/reset)
	PostProfileReset(ctx echo.Context) error

	// (POST /profile/reset/send)
	PostProfileResetSend(ctx echo.Context) error

	// (POST /profile/survey)
	PostProfileSurvey(ctx echo.Context) error

	// (DELETE /profile/survey/{UUID})
	DeleteProfileSurveyUUID(ctx echo.Context, uuid Uuid) error

	// (GET /profile/survey/{UUID})
	GetProfileSurveyUUID(ctx echo.Context, uuid Uuid) error

	// (POST /profile/validate)
	PostProfileValidate(ctx echo.Context) error

	// (POST /profile/validate-simple)
	PostProfileValidateSimple(ctx echo.Context) error

	// (POST /profile/validate-simple/send)
	PostProfileValidateSimpleSend(ctx echo.Context) error

	// (POST /profile/validate/send)
	PostProfileValidateSend(ctx echo.Context) error

	// (POST /project)
	PostProject(ctx echo.Context) error

	// (DELETE /project/{UUID})
	DeleteProjectUUID(ctx echo.Context, uuid Uuid) error

	// (GET /project/{UUID})
	GetProjectUUID(ctx echo.Context, uuid Uuid) error

	// (PATCH /project/{UUID})
	PatchProjectUUID(ctx echo.Context, uuid Uuid) error

	// (GET /project/{UUID}/catalog)
	GetProjectUUIDCatalog(ctx echo.Context, uuid Uuid) error

	// (POST /project/{UUID}/catalog)
	PostProjectUUIDCatalog(ctx echo.Context, uuid Uuid) error

	// (GET /project/{UUID}/catalog/{entityName})
	GetProjectUUIDCatalogEntityName(ctx echo.Context, uuid Uuid, entityName EntityName) error

	// (DELETE /project/{UUID}/catalog/{entityUUID})
	DeleteProjectUUIDCatalogEntityUUID(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (PATCH /project/{UUID}/description)
	PatchProjectUUIDDescription(ctx echo.Context, uuid Uuid) error

	// (DELETE /project/{UUID}/field/{entityUUID})
	DeleteProjectUUIDFieldEntityUUID(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (POST /project/{UUID}/field/{entityUUID})
	PostProjectUUIDFieldEntityUUID(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (PATCH /project/{UUID}/graph)
	PatchProjectUUIDGraph(ctx echo.Context, uuid Uuid) error

	// (PATCH /project/{UUID}/name)
	PatchProjectUUIDName(ctx echo.Context, uuid Uuid) error

	// (PATCH /project/{UUID}/options)
	PatchProjectUUIDOptions(ctx echo.Context, uuid Uuid) error

	// (GET /project/{UUID}/status)
	GetProjectUUIDStatus(ctx echo.Context, uuid Uuid) error

	// (POST /project/{UUID}/status)
	PostProjectUUIDStatus(ctx echo.Context, uuid Uuid) error

	// (DELETE /project/{UUID}/status/{entityUUID})
	DeleteProjectUUIDStatusEntityUUID(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (PATCH /project/{UUID}/status/{entityUUID})
	PatchProjectUUIDStatusEntityUUID(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (POST /project/{UUID}/user)
	PostProjectUUIDUser(ctx echo.Context, uuid Uuid) error

	// (DELETE /project/{UUID}/user/{userUUID})
	DeleteProjectUUIDUserUserUUID(ctx echo.Context, uuid Uuid, userUUID UserUUID) error

	// (GET /reminder)
	GetReminder(ctx echo.Context) error

	// (POST /reminder)
	PostReminder(ctx echo.Context) error

	// (DELETE /reminder/{UUID})
	DeleteReminderUUID(ctx echo.Context, uuid Uuid) error

	// (PUT /reminder/{UUID})
	PutReminderUUID(ctx echo.Context, uuid Uuid) error

	// (PATCH /reminder/{UUID}/status)
	PatchReminderUUIDStatus(ctx echo.Context, uuid Uuid) error

	// (GET /tag)
	GetTag(ctx echo.Context, params GetTagParams) error

	// (POST /tag)
	PostTag(ctx echo.Context) error

	// (DELETE /tag/{UUID})
	DeleteTagUUID(ctx echo.Context, uuid Uuid) error

	// (PATCH /tag/{UUID})
	PatchTagUUID(ctx echo.Context, uuid Uuid) error

	// (GET /task)
	GetTask(ctx echo.Context, params GetTaskParams) error

	// (POST /task)
	PostTask(ctx echo.Context) error

	// (DELETE /task/{UUID})
	DeleteTaskUUID(ctx echo.Context, uuid Uuid) error

	// (GET /task/{UUID})
	GetTaskUUID(ctx echo.Context, uuid Uuid) error

	// (PUT /task/{UUID})
	PutTaskUUID(ctx echo.Context, uuid Uuid) error

	// (GET /task/{UUID}/activity)
	GetTaskUUIDActivity(ctx echo.Context, uuid Uuid, params GetTaskUUIDActivityParams) error

	// (GET /task/{UUID}/comment)
	GetTaskUUIDComment(ctx echo.Context, uuid Uuid) error

	// (POST /task/{UUID}/comment)
	PostTaskUUIDComment(ctx echo.Context, uuid Uuid) error

	// (DELETE /task/{UUID}/comment/{entityUUID})
	DeleteTaskUUIDCommentEntityUUID(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (PATCH /task/{UUID}/comment/{entityUUID})
	PatchTaskUUIDCommentEntityUUID(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (DELETE /task/{UUID}/comment/{entityUUID}/file/{fileUUID})
	DeleteTaskUUIDCommentEntityUUIDFileFileUUID(ctx echo.Context, uuid Uuid, entityUUID EntityUUID, fileUUID FileUUID) error

	// (PATCH /task/{UUID}/comment/{entityUUID}/like)
	PatchTaskUUIDCommentEntityUUIDLike(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (PATCH /task/{UUID}/comment/{entityUUID}/pin)
	PatchTaskUUIDCommentEntityUUIDPin(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (PATCH /task/{UUID}/name)
	PatchTaskUUIDName(ctx echo.Context, uuid Uuid) error

	// (PATCH /task/{UUID}/parent)
	PatchTaskUUIDParent(ctx echo.Context, uuid Uuid) error

	// (PATCH /task/{UUID}/project)
	PatchTaskUUIDProject(ctx echo.Context, uuid Uuid) error

	// (PATCH /task/{UUID}/status)
	PatchTaskUUIDStatus(ctx echo.Context, uuid Uuid) error

	// (DELETE /task/{UUID}/stop/{entityUUID})
	DeleteTaskUUIDStopEntityUUID(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (PATCH /task/{UUID}/team)
	PatchTaskUUIDTeam(ctx echo.Context, uuid Uuid) error

	// (GET /task/{UUID}/upload)
	GetTaskUUIDUpload(ctx echo.Context, uuid Uuid) error

	// (PATCH /task/{UUID}/upload)
	PatchTaskUUIDUpload(ctx echo.Context, uuid Uuid) error

	// (DELETE /task/{UUID}/upload/{entityUUID})
	DeleteTaskUUIDUploadEntityUUID(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (GET /task/{UUID}/upload/{entityUUID})
	GetTaskUUIDUploadEntityUUID(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (POST /task/{UUID}/upload/{entityUUID}/rename)
	PostTaskUUIDUploadEntityUUIDRename(ctx echo.Context, uuid Uuid, entityUUID EntityUUID) error

	// (GET /user)
	GetUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAbout converts echo context to params.
func (w *ServerInterfaceWrapper) GetAbout(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAbout(ctx)
	return err
}

// GetCatalog converts echo context to params.
func (w *ServerInterfaceWrapper) GetCatalog(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCatalog(ctx)
	return err
}

// PostCatalog converts echo context to params.
func (w *ServerInterfaceWrapper) PostCatalog(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCatalog(ctx)
	return err
}

// DeleteCatalogUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCatalogUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCatalogUUID(ctx, uuid)
	return err
}

// GetCatalogUUID converts echo context to params.
func (w *ServerInterfaceWrapper) GetCatalogUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCatalogUUID(ctx, uuid)
	return err
}

// GetCatalogUUIDData converts echo context to params.
func (w *ServerInterfaceWrapper) GetCatalogUUIDData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCatalogUUIDDataParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", ctx.QueryParams(), &params.Order)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order: %s", err))
	}

	// ------------- Optional query parameter "by" -------------

	err = runtime.BindQueryParameter("form", true, false, "by", ctx.QueryParams(), &params.By)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter by: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCatalogUUIDData(ctx, uuid, params)
	return err
}

// PostCatalogUUIDData converts echo context to params.
func (w *ServerInterfaceWrapper) PostCatalogUUIDData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCatalogUUIDData(ctx, uuid)
	return err
}

// GetCatalogUUIDFields converts echo context to params.
func (w *ServerInterfaceWrapper) GetCatalogUUIDFields(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCatalogUUIDFields(ctx, uuid)
	return err
}

// PostCatalogUUIDFields converts echo context to params.
func (w *ServerInterfaceWrapper) PostCatalogUUIDFields(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCatalogUUIDFields(ctx, uuid)
	return err
}

// PostCatalogUUIDFieldsNamed converts echo context to params.
func (w *ServerInterfaceWrapper) PostCatalogUUIDFieldsNamed(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCatalogUUIDFieldsNamed(ctx, uuid)
	return err
}

// DeleteCatalogUUIDFieldsEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCatalogUUIDFieldsEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCatalogUUIDFieldsEntityUUID(ctx, uuid, entityUUID)
	return err
}

// PutCatalogUUIDFieldsEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PutCatalogUUIDFieldsEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutCatalogUUIDFieldsEntityUUID(ctx, uuid, entityUUID)
	return err
}

// PatchCatalogUUIDName converts echo context to params.
func (w *ServerInterfaceWrapper) PatchCatalogUUIDName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchCatalogUUIDName(ctx, uuid)
	return err
}

// PostCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCompany(ctx)
	return err
}

// DeleteCompanyUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompanyUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCompanyUUID(ctx, uuid)
	return err
}

// GetCompanyUUID converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanyUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompanyUUID(ctx, uuid)
	return err
}

// GetCompanyUUIDFields converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanyUUIDFields(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompanyUUIDFields(ctx, uuid)
	return err
}

// PostCompanyUUIDFields converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompanyUUIDFields(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCompanyUUIDFields(ctx, uuid)
	return err
}

// DeleteCompanyUUIDFieldsEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompanyUUIDFieldsEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCompanyUUIDFieldsEntityUUID(ctx, uuid, entityUUID)
	return err
}

// PutCompanyUUIDFieldsEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PutCompanyUUIDFieldsEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutCompanyUUIDFieldsEntityUUID(ctx, uuid, entityUUID)
	return err
}

// GetCompanyUUIDGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanyUUIDGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompanyUUIDGroup(ctx, uuid)
	return err
}

// PostCompanyUUIDGroup converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompanyUUIDGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCompanyUUIDGroup(ctx, uuid)
	return err
}

// DeleteCompanyUUIDGroupEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompanyUUIDGroupEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCompanyUUIDGroupEntityUUID(ctx, uuid, entityUUID)
	return err
}

// PatchCompanyUUIDGroupEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchCompanyUUIDGroupEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchCompanyUUIDGroupEntityUUID(ctx, uuid, entityUUID)
	return err
}

// PatchCompanyUUIDName converts echo context to params.
func (w *ServerInterfaceWrapper) PatchCompanyUUIDName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchCompanyUUIDName(ctx, uuid)
	return err
}

// GetCompanyUUIDPriorities converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanyUUIDPriorities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompanyUUIDPriorities(ctx, uuid)
	return err
}

// PostCompanyUUIDPriorities converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompanyUUIDPriorities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCompanyUUIDPriorities(ctx, uuid)
	return err
}

// DeleteCompanyUUIDPrioritiesEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompanyUUIDPrioritiesEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCompanyUUIDPrioritiesEntityUUID(ctx, uuid, entityUUID)
	return err
}

// PatchCompanyUUIDPrioritiesEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchCompanyUUIDPrioritiesEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchCompanyUUIDPrioritiesEntityUUID(ctx, uuid, entityUUID)
	return err
}

// GetCompanyUUIDProjectCatalogEntityName converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanyUUIDProjectCatalogEntityName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityName" -------------
	var entityName EntityName

	err = runtime.BindStyledParameterWithOptions("simple", "entityName", ctx.Param("entityName"), &entityName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityName: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompanyUUIDProjectCatalogEntityName(ctx, uuid, entityName)
	return err
}

// GetCompanyUUIDSms converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanyUUIDSms(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCompanyUUIDSmsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "is_my" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_my", ctx.QueryParams(), &params.IsMy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_my: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompanyUUIDSms(ctx, uuid, params)
	return err
}

// PostCompanyUUIDSmsCost converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompanyUUIDSmsCost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCompanyUUIDSmsCost(ctx, uuid)
	return err
}

// PostCompanyUUIDSmsOptions converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompanyUUIDSmsOptions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCompanyUUIDSmsOptions(ctx, uuid)
	return err
}

// PostCompanyUUIDSmsSend converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompanyUUIDSmsSend(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostCompanyUUIDSmsSendParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Mock-Sms" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Mock-Sms")]; found {
		var MockSms string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Mock-Sms, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Mock-Sms", valueList[0], &MockSms, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Mock-Sms: %s", err))
		}

		params.MockSms = &MockSms
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCompanyUUIDSmsSend(ctx, uuid, params)
	return err
}

// PostCompanyUUIDUser converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompanyUUIDUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCompanyUUIDUser(ctx, uuid)
	return err
}

// DeleteCompanyUUIDUserUserUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompanyUUIDUserUserUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "userUUID" -------------
	var userUUID UserUUID

	err = runtime.BindStyledParameterWithOptions("simple", "userUUID", ctx.Param("userUUID"), &userUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCompanyUUIDUserUserUUID(ctx, uuid, userUUID)
	return err
}

// PostFederation converts echo context to params.
func (w *ServerInterfaceWrapper) PostFederation(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFederation(ctx)
	return err
}

// DeleteFederationUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFederationUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteFederationUUID(ctx, uuid)
	return err
}

// GetFederationUUID converts echo context to params.
func (w *ServerInterfaceWrapper) GetFederationUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFederationUUID(ctx, uuid)
	return err
}

// GetFederationUUIDAgent converts echo context to params.
func (w *ServerInterfaceWrapper) GetFederationUUIDAgent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFederationUUIDAgentParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFederationUUIDAgent(ctx, uuid, params)
	return err
}

// PostFederationUUIDAgent converts echo context to params.
func (w *ServerInterfaceWrapper) PostFederationUUIDAgent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFederationUUIDAgent(ctx, uuid)
	return err
}

// DeleteFederationUUIDAgentEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFederationUUIDAgentEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteFederationUUIDAgentEntityUUID(ctx, uuid, entityUUID)
	return err
}

// PatchFederationUUIDAgentEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchFederationUUIDAgentEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchFederationUUIDAgentEntityUUID(ctx, uuid, entityUUID)
	return err
}

// GetFederationUUIDInvite converts echo context to params.
func (w *ServerInterfaceWrapper) GetFederationUUIDInvite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFederationUUIDInvite(ctx, uuid)
	return err
}

// PostFederationUUIDInvite converts echo context to params.
func (w *ServerInterfaceWrapper) PostFederationUUIDInvite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFederationUUIDInvite(ctx, uuid)
	return err
}

// DeleteFederationUUIDInviteEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFederationUUIDInviteEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteFederationUUIDInviteEntityUUID(ctx, uuid, entityUUID)
	return err
}

// PatchFederationUUIDName converts echo context to params.
func (w *ServerInterfaceWrapper) PatchFederationUUIDName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchFederationUUIDName(ctx, uuid)
	return err
}

// GetFederationUUIDProject converts echo context to params.
func (w *ServerInterfaceWrapper) GetFederationUUIDProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFederationUUIDProjectParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "company_uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "company_uuid", ctx.QueryParams(), &params.CompanyUuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_uuid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFederationUUIDProject(ctx, uuid, params)
	return err
}

// PostFederationUUIDUser converts echo context to params.
func (w *ServerInterfaceWrapper) PostFederationUUIDUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFederationUUIDUser(ctx, uuid)
	return err
}

// DeleteFederationUUIDUserUserUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFederationUUIDUserUserUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "userUUID" -------------
	var userUUID UserUUID

	err = runtime.BindStyledParameterWithOptions("simple", "userUUID", ctx.Param("userUUID"), &userUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteFederationUUIDUserUserUUID(ctx, uuid, userUUID)
	return err
}

// DeleteGroupUUIDUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteGroupUUIDUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteGroupUUIDUser(ctx, uuid)
	return err
}

// GetGroupUUIDUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupUUIDUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGroupUUIDUser(ctx, uuid)
	return err
}

// PostGroupUUIDUser converts echo context to params.
func (w *ServerInterfaceWrapper) PostGroupUUIDUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostGroupUUIDUser(ctx, uuid)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetAllLegalEntities converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllLegalEntities(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllLegalEntities(ctx)
	return err
}

// CreateLegalEntity converts echo context to params.
func (w *ServerInterfaceWrapper) CreateLegalEntity(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateLegalEntity(ctx)
	return err
}

// DeleteLegalEntity converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLegalEntity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", ctx.Param("uuid"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLegalEntity(ctx, uuid)
	return err
}

// UpdateLegalEntity converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateLegalEntity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", ctx.Param("uuid"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateLegalEntity(ctx, uuid)
	return err
}

// PostPermissions converts echo context to params.
func (w *ServerInterfaceWrapper) PostPermissions(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPermissions(ctx)
	return err
}

// DeletePermissionsUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePermissionsUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePermissionsUUID(ctx, uuid)
	return err
}

// GetPermissionsUUID converts echo context to params.
func (w *ServerInterfaceWrapper) GetPermissionsUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPermissionsUUID(ctx, uuid)
	return err
}

// DeleteProfile converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProfile(ctx)
	return err
}

// GetProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfile(ctx)
	return err
}

// PostProfile converts echo context to params.
func (w *ServerInterfaceWrapper) PostProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProfile(ctx)
	return err
}

// PatchProfileColor converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProfileColor(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProfileColor(ctx)
	return err
}

// PostProfileDislike converts echo context to params.
func (w *ServerInterfaceWrapper) PostProfileDislike(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProfileDislike(ctx)
	return err
}

// PatchProfileFio converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProfileFio(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProfileFio(ctx)
	return err
}

// GetProfileInvite converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfileInvite(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfileInvite(ctx)
	return err
}

// PatchProfileInviteUUIDAccept converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProfileInviteUUIDAccept(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProfileInviteUUIDAccept(ctx, uuid)
	return err
}

// PatchProfileInviteUUIDDecline converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProfileInviteUUIDDecline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProfileInviteUUIDDecline(ctx, uuid)
	return err
}

// PostProfileLike converts echo context to params.
func (w *ServerInterfaceWrapper) PostProfileLike(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProfileLike(ctx)
	return err
}

// GetProfileLikes converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfileLikes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfileLikes(ctx)
	return err
}

// PostProfileLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostProfileLogin(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProfileLogin(ctx)
	return err
}

// PostProfileLoginAs converts echo context to params.
func (w *ServerInterfaceWrapper) PostProfileLoginAs(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProfileLoginAs(ctx)
	return err
}

// GetProfileLogout converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfileLogout(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfileLogout(ctx)
	return err
}

// DeleteProfileNotifications converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProfileNotifications(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProfileNotifications(ctx)
	return err
}

// GetProfileNotifications converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfileNotifications(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfileNotifications(ctx)
	return err
}

// PostProfileNotificationsTaskUUIDHide converts echo context to params.
func (w *ServerInterfaceWrapper) PostProfileNotificationsTaskUUIDHide(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProfileNotificationsTaskUUIDHide(ctx, uuid)
	return err
}

// DeleteProfileNotificationsTaskUUIDStar converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProfileNotificationsTaskUUIDStar(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProfileNotificationsTaskUUIDStar(ctx, uuid)
	return err
}

// PostProfileNotificationsTaskUUIDStar converts echo context to params.
func (w *ServerInterfaceWrapper) PostProfileNotificationsTaskUUIDStar(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProfileNotificationsTaskUUIDStar(ctx, uuid)
	return err
}

// PatchProfilePassword converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProfilePassword(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProfilePassword(ctx)
	return err
}

// PatchProfilePhone converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProfilePhone(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProfilePhone(ctx)
	return err
}

// DeleteProfilePhoto converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProfilePhoto(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProfilePhoto(ctx)
	return err
}

// PatchProfilePhoto converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProfilePhoto(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProfilePhoto(ctx)
	return err
}

// PatchProfilePreferences converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProfilePreferences(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProfilePreferences(ctx)
	return err
}

// PostProfileReset converts echo context to params.
func (w *ServerInterfaceWrapper) PostProfileReset(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProfileReset(ctx)
	return err
}

// PostProfileResetSend converts echo context to params.
func (w *ServerInterfaceWrapper) PostProfileResetSend(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProfileResetSend(ctx)
	return err
}

// PostProfileSurvey converts echo context to params.
func (w *ServerInterfaceWrapper) PostProfileSurvey(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProfileSurvey(ctx)
	return err
}

// DeleteProfileSurveyUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProfileSurveyUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProfileSurveyUUID(ctx, uuid)
	return err
}

// GetProfileSurveyUUID converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfileSurveyUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfileSurveyUUID(ctx, uuid)
	return err
}

// PostProfileValidate converts echo context to params.
func (w *ServerInterfaceWrapper) PostProfileValidate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProfileValidate(ctx)
	return err
}

// PostProfileValidateSimple converts echo context to params.
func (w *ServerInterfaceWrapper) PostProfileValidateSimple(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProfileValidateSimple(ctx)
	return err
}

// PostProfileValidateSimpleSend converts echo context to params.
func (w *ServerInterfaceWrapper) PostProfileValidateSimpleSend(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProfileValidateSimpleSend(ctx)
	return err
}

// PostProfileValidateSend converts echo context to params.
func (w *ServerInterfaceWrapper) PostProfileValidateSend(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProfileValidateSend(ctx)
	return err
}

// PostProject converts echo context to params.
func (w *ServerInterfaceWrapper) PostProject(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProject(ctx)
	return err
}

// DeleteProjectUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProjectUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProjectUUID(ctx, uuid)
	return err
}

// GetProjectUUID converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjectUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProjectUUID(ctx, uuid)
	return err
}

// PatchProjectUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProjectUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProjectUUID(ctx, uuid)
	return err
}

// GetProjectUUIDCatalog converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjectUUIDCatalog(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProjectUUIDCatalog(ctx, uuid)
	return err
}

// PostProjectUUIDCatalog converts echo context to params.
func (w *ServerInterfaceWrapper) PostProjectUUIDCatalog(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProjectUUIDCatalog(ctx, uuid)
	return err
}

// GetProjectUUIDCatalogEntityName converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjectUUIDCatalogEntityName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityName" -------------
	var entityName EntityName

	err = runtime.BindStyledParameterWithOptions("simple", "entityName", ctx.Param("entityName"), &entityName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityName: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProjectUUIDCatalogEntityName(ctx, uuid, entityName)
	return err
}

// DeleteProjectUUIDCatalogEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProjectUUIDCatalogEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProjectUUIDCatalogEntityUUID(ctx, uuid, entityUUID)
	return err
}

// PatchProjectUUIDDescription converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProjectUUIDDescription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProjectUUIDDescription(ctx, uuid)
	return err
}

// DeleteProjectUUIDFieldEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProjectUUIDFieldEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProjectUUIDFieldEntityUUID(ctx, uuid, entityUUID)
	return err
}

// PostProjectUUIDFieldEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PostProjectUUIDFieldEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProjectUUIDFieldEntityUUID(ctx, uuid, entityUUID)
	return err
}

// PatchProjectUUIDGraph converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProjectUUIDGraph(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProjectUUIDGraph(ctx, uuid)
	return err
}

// PatchProjectUUIDName converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProjectUUIDName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProjectUUIDName(ctx, uuid)
	return err
}

// PatchProjectUUIDOptions converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProjectUUIDOptions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProjectUUIDOptions(ctx, uuid)
	return err
}

// GetProjectUUIDStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjectUUIDStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProjectUUIDStatus(ctx, uuid)
	return err
}

// PostProjectUUIDStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostProjectUUIDStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProjectUUIDStatus(ctx, uuid)
	return err
}

// DeleteProjectUUIDStatusEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProjectUUIDStatusEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProjectUUIDStatusEntityUUID(ctx, uuid, entityUUID)
	return err
}

// PatchProjectUUIDStatusEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProjectUUIDStatusEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProjectUUIDStatusEntityUUID(ctx, uuid, entityUUID)
	return err
}

// PostProjectUUIDUser converts echo context to params.
func (w *ServerInterfaceWrapper) PostProjectUUIDUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProjectUUIDUser(ctx, uuid)
	return err
}

// DeleteProjectUUIDUserUserUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProjectUUIDUserUserUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "userUUID" -------------
	var userUUID UserUUID

	err = runtime.BindStyledParameterWithOptions("simple", "userUUID", ctx.Param("userUUID"), &userUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProjectUUIDUserUserUUID(ctx, uuid, userUUID)
	return err
}

// GetReminder converts echo context to params.
func (w *ServerInterfaceWrapper) GetReminder(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetReminder(ctx)
	return err
}

// PostReminder converts echo context to params.
func (w *ServerInterfaceWrapper) PostReminder(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostReminder(ctx)
	return err
}

// DeleteReminderUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteReminderUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteReminderUUID(ctx, uuid)
	return err
}

// PutReminderUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PutReminderUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutReminderUUID(ctx, uuid)
	return err
}

// PatchReminderUUIDStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PatchReminderUUIDStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchReminderUUIDStatus(ctx, uuid)
	return err
}

// GetTag converts echo context to params.
func (w *ServerInterfaceWrapper) GetTag(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagParams
	// ------------- Required query parameter "company_uuid" -------------

	err = runtime.BindQueryParameter("form", true, true, "company_uuid", ctx.QueryParams(), &params.CompanyUuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_uuid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTag(ctx, params)
	return err
}

// PostTag converts echo context to params.
func (w *ServerInterfaceWrapper) PostTag(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTag(ctx)
	return err
}

// DeleteTagUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTagUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTagUUID(ctx, uuid)
	return err
}

// PatchTagUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTagUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTagUUID(ctx, uuid)
	return err
}

// GetTask converts echo context to params.
func (w *ServerInterfaceWrapper) GetTask(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTaskParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "is_my" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_my", ctx.QueryParams(), &params.IsMy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_my: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "is_epic" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_epic", ctx.QueryParams(), &params.IsEpic)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_epic: %s", err))
	}

	// ------------- Required query parameter "project_uuid" -------------

	err = runtime.BindQueryParameter("form", true, true, "project_uuid", ctx.QueryParams(), &params.ProjectUuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter project_uuid: %s", err))
	}

	// ------------- Required query parameter "federation_uuid" -------------

	err = runtime.BindQueryParameter("form", true, true, "federation_uuid", ctx.QueryParams(), &params.FederationUuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter federation_uuid: %s", err))
	}

	// ------------- Optional query parameter "participated" -------------

	err = runtime.BindQueryParameter("form", true, false, "participated", ctx.QueryParams(), &params.Participated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participated: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", ctx.QueryParams(), &params.Fields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fields: %s", err))
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", ctx.QueryParams(), &params.Order)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order: %s", err))
	}

	// ------------- Optional query parameter "by" -------------

	err = runtime.BindQueryParameter("form", true, false, "by", ctx.QueryParams(), &params.By)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter by: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTask(ctx, params)
	return err
}

// PostTask converts echo context to params.
func (w *ServerInterfaceWrapper) PostTask(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTask(ctx)
	return err
}

// DeleteTaskUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTaskUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTaskUUID(ctx, uuid)
	return err
}

// GetTaskUUID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTaskUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTaskUUID(ctx, uuid)
	return err
}

// PutTaskUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PutTaskUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTaskUUID(ctx, uuid)
	return err
}

// GetTaskUUIDActivity converts echo context to params.
func (w *ServerInterfaceWrapper) GetTaskUUIDActivity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTaskUUIDActivityParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTaskUUIDActivity(ctx, uuid, params)
	return err
}

// GetTaskUUIDComment converts echo context to params.
func (w *ServerInterfaceWrapper) GetTaskUUIDComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTaskUUIDComment(ctx, uuid)
	return err
}

// PostTaskUUIDComment converts echo context to params.
func (w *ServerInterfaceWrapper) PostTaskUUIDComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTaskUUIDComment(ctx, uuid)
	return err
}

// DeleteTaskUUIDCommentEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTaskUUIDCommentEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTaskUUIDCommentEntityUUID(ctx, uuid, entityUUID)
	return err
}

// PatchTaskUUIDCommentEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTaskUUIDCommentEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTaskUUIDCommentEntityUUID(ctx, uuid, entityUUID)
	return err
}

// DeleteTaskUUIDCommentEntityUUIDFileFileUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTaskUUIDCommentEntityUUIDFileFileUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	// ------------- Path parameter "fileUUID" -------------
	var fileUUID FileUUID

	err = runtime.BindStyledParameterWithOptions("simple", "fileUUID", ctx.Param("fileUUID"), &fileUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fileUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTaskUUIDCommentEntityUUIDFileFileUUID(ctx, uuid, entityUUID, fileUUID)
	return err
}

// PatchTaskUUIDCommentEntityUUIDLike converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTaskUUIDCommentEntityUUIDLike(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTaskUUIDCommentEntityUUIDLike(ctx, uuid, entityUUID)
	return err
}

// PatchTaskUUIDCommentEntityUUIDPin converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTaskUUIDCommentEntityUUIDPin(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTaskUUIDCommentEntityUUIDPin(ctx, uuid, entityUUID)
	return err
}

// PatchTaskUUIDName converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTaskUUIDName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTaskUUIDName(ctx, uuid)
	return err
}

// PatchTaskUUIDParent converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTaskUUIDParent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTaskUUIDParent(ctx, uuid)
	return err
}

// PatchTaskUUIDProject converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTaskUUIDProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTaskUUIDProject(ctx, uuid)
	return err
}

// PatchTaskUUIDStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTaskUUIDStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTaskUUIDStatus(ctx, uuid)
	return err
}

// DeleteTaskUUIDStopEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTaskUUIDStopEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTaskUUIDStopEntityUUID(ctx, uuid, entityUUID)
	return err
}

// PatchTaskUUIDTeam converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTaskUUIDTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTaskUUIDTeam(ctx, uuid)
	return err
}

// GetTaskUUIDUpload converts echo context to params.
func (w *ServerInterfaceWrapper) GetTaskUUIDUpload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTaskUUIDUpload(ctx, uuid)
	return err
}

// PatchTaskUUIDUpload converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTaskUUIDUpload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTaskUUIDUpload(ctx, uuid)
	return err
}

// DeleteTaskUUIDUploadEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTaskUUIDUploadEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTaskUUIDUploadEntityUUID(ctx, uuid, entityUUID)
	return err
}

// GetTaskUUIDUploadEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTaskUUIDUploadEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTaskUUIDUploadEntityUUID(ctx, uuid, entityUUID)
	return err
}

// PostTaskUUIDUploadEntityUUIDRename converts echo context to params.
func (w *ServerInterfaceWrapper) PostTaskUUIDUploadEntityUUIDRename(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uuid Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "UUID", ctx.Param("UUID"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithOptions("simple", "entityUUID", ctx.Param("entityUUID"), &entityUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTaskUUIDUploadEntityUUIDRename(ctx, uuid, entityUUID)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/about", wrapper.GetAbout)
	router.GET(baseURL+"/catalog", wrapper.GetCatalog)
	router.POST(baseURL+"/catalog", wrapper.PostCatalog)
	router.DELETE(baseURL+"/catalog/:UUID", wrapper.DeleteCatalogUUID)
	router.GET(baseURL+"/catalog/:UUID", wrapper.GetCatalogUUID)
	router.GET(baseURL+"/catalog/:UUID/data", wrapper.GetCatalogUUIDData)
	router.POST(baseURL+"/catalog/:UUID/data", wrapper.PostCatalogUUIDData)
	router.GET(baseURL+"/catalog/:UUID/fields", wrapper.GetCatalogUUIDFields)
	router.POST(baseURL+"/catalog/:UUID/fields", wrapper.PostCatalogUUIDFields)
	router.POST(baseURL+"/catalog/:UUID/fields/named", wrapper.PostCatalogUUIDFieldsNamed)
	router.DELETE(baseURL+"/catalog/:UUID/fields/:entityUUID", wrapper.DeleteCatalogUUIDFieldsEntityUUID)
	router.PUT(baseURL+"/catalog/:UUID/fields/:entityUUID", wrapper.PutCatalogUUIDFieldsEntityUUID)
	router.PATCH(baseURL+"/catalog/:UUID/name", wrapper.PatchCatalogUUIDName)
	router.POST(baseURL+"/company", wrapper.PostCompany)
	router.DELETE(baseURL+"/company/:UUID", wrapper.DeleteCompanyUUID)
	router.GET(baseURL+"/company/:UUID", wrapper.GetCompanyUUID)
	router.GET(baseURL+"/company/:UUID/fields", wrapper.GetCompanyUUIDFields)
	router.POST(baseURL+"/company/:UUID/fields", wrapper.PostCompanyUUIDFields)
	router.DELETE(baseURL+"/company/:UUID/fields/:entityUUID", wrapper.DeleteCompanyUUIDFieldsEntityUUID)
	router.PUT(baseURL+"/company/:UUID/fields/:entityUUID", wrapper.PutCompanyUUIDFieldsEntityUUID)
	router.GET(baseURL+"/company/:UUID/group", wrapper.GetCompanyUUIDGroup)
	router.POST(baseURL+"/company/:UUID/group", wrapper.PostCompanyUUIDGroup)
	router.DELETE(baseURL+"/company/:UUID/group/:entityUUID", wrapper.DeleteCompanyUUIDGroupEntityUUID)
	router.PATCH(baseURL+"/company/:UUID/group/:entityUUID", wrapper.PatchCompanyUUIDGroupEntityUUID)
	router.PATCH(baseURL+"/company/:UUID/name", wrapper.PatchCompanyUUIDName)
	router.GET(baseURL+"/company/:UUID/priorities", wrapper.GetCompanyUUIDPriorities)
	router.POST(baseURL+"/company/:UUID/priorities", wrapper.PostCompanyUUIDPriorities)
	router.DELETE(baseURL+"/company/:UUID/priorities/:entityUUID", wrapper.DeleteCompanyUUIDPrioritiesEntityUUID)
	router.PATCH(baseURL+"/company/:UUID/priorities/:entityUUID", wrapper.PatchCompanyUUIDPrioritiesEntityUUID)
	router.GET(baseURL+"/company/:UUID/project/catalog/:entityName", wrapper.GetCompanyUUIDProjectCatalogEntityName)
	router.GET(baseURL+"/company/:UUID/sms", wrapper.GetCompanyUUIDSms)
	router.POST(baseURL+"/company/:UUID/sms/cost", wrapper.PostCompanyUUIDSmsCost)
	router.POST(baseURL+"/company/:UUID/sms/options", wrapper.PostCompanyUUIDSmsOptions)
	router.POST(baseURL+"/company/:UUID/sms/send", wrapper.PostCompanyUUIDSmsSend)
	router.POST(baseURL+"/company/:UUID/user", wrapper.PostCompanyUUIDUser)
	router.DELETE(baseURL+"/company/:UUID/user/:userUUID", wrapper.DeleteCompanyUUIDUserUserUUID)
	router.POST(baseURL+"/federation", wrapper.PostFederation)
	router.DELETE(baseURL+"/federation/:UUID", wrapper.DeleteFederationUUID)
	router.GET(baseURL+"/federation/:UUID", wrapper.GetFederationUUID)
	router.GET(baseURL+"/federation/:UUID/agent", wrapper.GetFederationUUIDAgent)
	router.POST(baseURL+"/federation/:UUID/agent", wrapper.PostFederationUUIDAgent)
	router.DELETE(baseURL+"/federation/:UUID/agent/:entityUUID", wrapper.DeleteFederationUUIDAgentEntityUUID)
	router.PATCH(baseURL+"/federation/:UUID/agent/:entityUUID", wrapper.PatchFederationUUIDAgentEntityUUID)
	router.GET(baseURL+"/federation/:UUID/invite", wrapper.GetFederationUUIDInvite)
	router.POST(baseURL+"/federation/:UUID/invite", wrapper.PostFederationUUIDInvite)
	router.DELETE(baseURL+"/federation/:UUID/invite/:entityUUID", wrapper.DeleteFederationUUIDInviteEntityUUID)
	router.PATCH(baseURL+"/federation/:UUID/name", wrapper.PatchFederationUUIDName)
	router.GET(baseURL+"/federation/:UUID/project", wrapper.GetFederationUUIDProject)
	router.POST(baseURL+"/federation/:UUID/user", wrapper.PostFederationUUIDUser)
	router.DELETE(baseURL+"/federation/:UUID/user/:userUUID", wrapper.DeleteFederationUUIDUserUserUUID)
	router.DELETE(baseURL+"/group/:UUID/user", wrapper.DeleteGroupUUIDUser)
	router.GET(baseURL+"/group/:UUID/user", wrapper.GetGroupUUIDUser)
	router.POST(baseURL+"/group/:UUID/user", wrapper.PostGroupUUIDUser)
	router.GET(baseURL+"/health", wrapper.GetHealth)
	router.GET(baseURL+"/legal-entities", wrapper.GetAllLegalEntities)
	router.POST(baseURL+"/legal-entities", wrapper.CreateLegalEntity)
	router.DELETE(baseURL+"/legal-entities/:uuid", wrapper.DeleteLegalEntity)
	router.PUT(baseURL+"/legal-entities/:uuid", wrapper.UpdateLegalEntity)
	router.POST(baseURL+"/permissions", wrapper.PostPermissions)
	router.DELETE(baseURL+"/permissions/:UUID", wrapper.DeletePermissionsUUID)
	router.GET(baseURL+"/permissions/:UUID", wrapper.GetPermissionsUUID)
	router.DELETE(baseURL+"/profile", wrapper.DeleteProfile)
	router.GET(baseURL+"/profile", wrapper.GetProfile)
	router.POST(baseURL+"/profile", wrapper.PostProfile)
	router.PATCH(baseURL+"/profile/color", wrapper.PatchProfileColor)
	router.POST(baseURL+"/profile/dislike", wrapper.PostProfileDislike)
	router.PATCH(baseURL+"/profile/fio", wrapper.PatchProfileFio)
	router.GET(baseURL+"/profile/invite", wrapper.GetProfileInvite)
	router.PATCH(baseURL+"/profile/invite/:UUID/accept", wrapper.PatchProfileInviteUUIDAccept)
	router.PATCH(baseURL+"/profile/invite/:UUID/decline", wrapper.PatchProfileInviteUUIDDecline)
	router.POST(baseURL+"/profile/like", wrapper.PostProfileLike)
	router.GET(baseURL+"/profile/likes", wrapper.GetProfileLikes)
	router.POST(baseURL+"/profile/login", wrapper.PostProfileLogin)
	router.POST(baseURL+"/profile/login_as", wrapper.PostProfileLoginAs)
	router.GET(baseURL+"/profile/logout", wrapper.GetProfileLogout)
	router.DELETE(baseURL+"/profile/notifications", wrapper.DeleteProfileNotifications)
	router.GET(baseURL+"/profile/notifications", wrapper.GetProfileNotifications)
	router.POST(baseURL+"/profile/notifications/task/:UUID/hide", wrapper.PostProfileNotificationsTaskUUIDHide)
	router.DELETE(baseURL+"/profile/notifications/task/:UUID/star", wrapper.DeleteProfileNotificationsTaskUUIDStar)
	router.POST(baseURL+"/profile/notifications/task/:UUID/star", wrapper.PostProfileNotificationsTaskUUIDStar)
	router.PATCH(baseURL+"/profile/password", wrapper.PatchProfilePassword)
	router.PATCH(baseURL+"/profile/phone", wrapper.PatchProfilePhone)
	router.DELETE(baseURL+"/profile/photo", wrapper.DeleteProfilePhoto)
	router.PATCH(baseURL+"/profile/photo", wrapper.PatchProfilePhoto)
	router.PATCH(baseURL+"/profile/preferences", wrapper.PatchProfilePreferences)
	router.POST(baseURL+"/profile/reset", wrapper.PostProfileReset)
	router.POST(baseURL+"/profile/reset/send", wrapper.PostProfileResetSend)
	router.POST(baseURL+"/profile/survey", wrapper.PostProfileSurvey)
	router.DELETE(baseURL+"/profile/survey/:UUID", wrapper.DeleteProfileSurveyUUID)
	router.GET(baseURL+"/profile/survey/:UUID", wrapper.GetProfileSurveyUUID)
	router.POST(baseURL+"/profile/validate", wrapper.PostProfileValidate)
	router.POST(baseURL+"/profile/validate-simple", wrapper.PostProfileValidateSimple)
	router.POST(baseURL+"/profile/validate-simple/send", wrapper.PostProfileValidateSimpleSend)
	router.POST(baseURL+"/profile/validate/send", wrapper.PostProfileValidateSend)
	router.POST(baseURL+"/project", wrapper.PostProject)
	router.DELETE(baseURL+"/project/:UUID", wrapper.DeleteProjectUUID)
	router.GET(baseURL+"/project/:UUID", wrapper.GetProjectUUID)
	router.PATCH(baseURL+"/project/:UUID", wrapper.PatchProjectUUID)
	router.GET(baseURL+"/project/:UUID/catalog", wrapper.GetProjectUUIDCatalog)
	router.POST(baseURL+"/project/:UUID/catalog", wrapper.PostProjectUUIDCatalog)
	router.GET(baseURL+"/project/:UUID/catalog/:entityName", wrapper.GetProjectUUIDCatalogEntityName)
	router.DELETE(baseURL+"/project/:UUID/catalog/:entityUUID", wrapper.DeleteProjectUUIDCatalogEntityUUID)
	router.PATCH(baseURL+"/project/:UUID/description", wrapper.PatchProjectUUIDDescription)
	router.DELETE(baseURL+"/project/:UUID/field/:entityUUID", wrapper.DeleteProjectUUIDFieldEntityUUID)
	router.POST(baseURL+"/project/:UUID/field/:entityUUID", wrapper.PostProjectUUIDFieldEntityUUID)
	router.PATCH(baseURL+"/project/:UUID/graph", wrapper.PatchProjectUUIDGraph)
	router.PATCH(baseURL+"/project/:UUID/name", wrapper.PatchProjectUUIDName)
	router.PATCH(baseURL+"/project/:UUID/options", wrapper.PatchProjectUUIDOptions)
	router.GET(baseURL+"/project/:UUID/status", wrapper.GetProjectUUIDStatus)
	router.POST(baseURL+"/project/:UUID/status", wrapper.PostProjectUUIDStatus)
	router.DELETE(baseURL+"/project/:UUID/status/:entityUUID", wrapper.DeleteProjectUUIDStatusEntityUUID)
	router.PATCH(baseURL+"/project/:UUID/status/:entityUUID", wrapper.PatchProjectUUIDStatusEntityUUID)
	router.POST(baseURL+"/project/:UUID/user", wrapper.PostProjectUUIDUser)
	router.DELETE(baseURL+"/project/:UUID/user/:userUUID", wrapper.DeleteProjectUUIDUserUserUUID)
	router.GET(baseURL+"/reminder", wrapper.GetReminder)
	router.POST(baseURL+"/reminder", wrapper.PostReminder)
	router.DELETE(baseURL+"/reminder/:UUID", wrapper.DeleteReminderUUID)
	router.PUT(baseURL+"/reminder/:UUID", wrapper.PutReminderUUID)
	router.PATCH(baseURL+"/reminder/:UUID/status", wrapper.PatchReminderUUIDStatus)
	router.GET(baseURL+"/tag", wrapper.GetTag)
	router.POST(baseURL+"/tag", wrapper.PostTag)
	router.DELETE(baseURL+"/tag/:UUID", wrapper.DeleteTagUUID)
	router.PATCH(baseURL+"/tag/:UUID", wrapper.PatchTagUUID)
	router.GET(baseURL+"/task", wrapper.GetTask)
	router.POST(baseURL+"/task", wrapper.PostTask)
	router.DELETE(baseURL+"/task/:UUID", wrapper.DeleteTaskUUID)
	router.GET(baseURL+"/task/:UUID", wrapper.GetTaskUUID)
	router.PUT(baseURL+"/task/:UUID", wrapper.PutTaskUUID)
	router.GET(baseURL+"/task/:UUID/activity", wrapper.GetTaskUUIDActivity)
	router.GET(baseURL+"/task/:UUID/comment", wrapper.GetTaskUUIDComment)
	router.POST(baseURL+"/task/:UUID/comment", wrapper.PostTaskUUIDComment)
	router.DELETE(baseURL+"/task/:UUID/comment/:entityUUID", wrapper.DeleteTaskUUIDCommentEntityUUID)
	router.PATCH(baseURL+"/task/:UUID/comment/:entityUUID", wrapper.PatchTaskUUIDCommentEntityUUID)
	router.DELETE(baseURL+"/task/:UUID/comment/:entityUUID/file/:fileUUID", wrapper.DeleteTaskUUIDCommentEntityUUIDFileFileUUID)
	router.PATCH(baseURL+"/task/:UUID/comment/:entityUUID/like", wrapper.PatchTaskUUIDCommentEntityUUIDLike)
	router.PATCH(baseURL+"/task/:UUID/comment/:entityUUID/pin", wrapper.PatchTaskUUIDCommentEntityUUIDPin)
	router.PATCH(baseURL+"/task/:UUID/name", wrapper.PatchTaskUUIDName)
	router.PATCH(baseURL+"/task/:UUID/parent", wrapper.PatchTaskUUIDParent)
	router.PATCH(baseURL+"/task/:UUID/project", wrapper.PatchTaskUUIDProject)
	router.PATCH(baseURL+"/task/:UUID/status", wrapper.PatchTaskUUIDStatus)
	router.DELETE(baseURL+"/task/:UUID/stop/:entityUUID", wrapper.DeleteTaskUUIDStopEntityUUID)
	router.PATCH(baseURL+"/task/:UUID/team", wrapper.PatchTaskUUIDTeam)
	router.GET(baseURL+"/task/:UUID/upload", wrapper.GetTaskUUIDUpload)
	router.PATCH(baseURL+"/task/:UUID/upload", wrapper.PatchTaskUUIDUpload)
	router.DELETE(baseURL+"/task/:UUID/upload/:entityUUID", wrapper.DeleteTaskUUIDUploadEntityUUID)
	router.GET(baseURL+"/task/:UUID/upload/:entityUUID", wrapper.GetTaskUUIDUploadEntityUUID)
	router.POST(baseURL+"/task/:UUID/upload/:entityUUID/rename", wrapper.PostTaskUUIDUploadEntityUUIDRename)
	router.GET(baseURL+"/user", wrapper.GetUser)

}
